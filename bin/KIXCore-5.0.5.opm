<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>KIXCore</Name>
    <Version>5.0.5</Version>
    <Vendor>c.a.p.e. IT GmbH</Vendor>
    <URL>http://www.cape-it.de/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Version="5.0.5" Date="2016-08-02 08:45:56">CR:  T2016070490000433 (added changes from OTRS 5.0.11); Bugfix:  T2016071990000558 (documentation and post install information contain referenced to old kix.ManageMultipleCustomPackages.pl).</ChangeLog>
    <ChangeLog Version="5.0.4" Date="2016-05-31 16:31:51">CR: T2016051790002376 (added changes from OTRS 5.0.10).</ChangeLog>
    <ChangeLog Version="5.0.3" Date="2016-05-02 19:47:12">CR: T2016041290000665 (added changes from OTRS 5.0.9); Bugfix: T2016041990000974 (template include paths restricted). </ChangeLog>
    <ChangeLog Version="5.0.2" Date="2016-03-30 09:53:26">CR: T2016033090000507 (OTRS-Bug!! Internal Server Error in AdminPackageManager), T2016032290000764 (added changes from OTRS 5.0.8).</ChangeLog>
    <ChangeLog Version="5.0.1" Date="2016-03-01 18:02:57">CR: T2016022390000719 (added changes from OTRS 5.0.7).</ChangeLog>
    <ChangeLog Version="5.0.0" Date="2016-01-29 18:36:36">First public release of KIXCore for OTRS 5.0. </ChangeLog>
    <ChangeLog Version="4.99.81" Date="2016-01-23 11:58:23">Second beta-release. </ChangeLog>
    <ChangeLog Version="4.99.80" Date="2016-01-08 18:30:40">First beta-release.</ChangeLog>
    <Description Lang="en">KIXCore - Core package for KIX tsunami framework.</Description>
    <Description Lang="de">KIXCore - Kernpaket fuer den KIX Tsunami-Ansatz.</Description>
    <Framework>5.0.11</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">
        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to install the OTRS module KIXCore. This package provides a more flexible and more general approach for extensions of extensions than the common Custom-folder of OTRS itself.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;Recommended perl modules:&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;ul&gt;
        &lt;li&gt;Data::Compare - required if you want to keep track of SysConfig changes, e.g. what was changed by which user. However, the other parts of this OTRS-extensions will work without it.&lt;/li&gt;
        &lt;li&gt;Cache::Memcached::Fast - required if you want to use Memcached for internal caching.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;Important Advice:&lt;/strong&gt;&lt;br/&gt;
        &lt;br/&gt;
        This package requires that the user which installs the package (i.e. webserver user) has got write permissions on file Config.pm and apache2-perl-startup.pl. If this is not the case, the installation will fail.You should then try to run &quot;bin/otrs.Console.pl Admin::MultipleCustomPackages::Register --package-name KIXCore --priority 000&quot; in order to get this extension running.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        c.a.p.e. IT ...easy.&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroInstall Lang="en" Title="Installation Information" Type="post">
        &lt;br/&gt;
        &lt;strong&gt;Important Advice:&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        If you are using OTRS with modperl, the webserver must be restarted now. Please do this before you continue the use of this OTRS installation.
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;Notice&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        If you want to have a explanation how this extension works, please have a look at the documentation provided in doc-directory.
        &lt;br/&gt;
        &lt;br/&gt;
        c.a.p.e. IT ...easy.&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstallation Information" Type="pre">
        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to UNINSTALL the KIXCore extensions package for OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        c.a.p.e. IT ...easy.&lt;br/&gt;
        &lt;br/&gt;
    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">
        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to upgrade the KIXCore extensions package for OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        c.a.p.e. IT ...easy.&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <CodeInstall Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeInstall();

    </CodeInstall>
    <CodeUpgrade Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # discard internally stored object, so that the next access to object creates them newly
        $Kernel::OM-&gt;ObjectsDiscard(
            Objects            =&gt; [$CodeModule],
            ForcePackageReload =&gt; 1,
        );

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgrade();

    </CodeUpgrade>
    <CodeUninstall Type="pre">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUninstall();

    </CodeUninstall>
    <CodeReinstall Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeReinstall();

    </CodeReinstall>
    <BuildDate>2016-08-02 08:45:56</BuildDate>
    <BuildHost>cvs.intra.cape-it.de</BuildHost>
    <Filelist>
        <File Location="doc/CHANGES_KIXCore.md" Permission="644" Encode="Base64"></File>
        <File Location="doc/en/KIXCore.pod" Permission="644" Encode="Base64">IyAkSWQ6IEtJWENvcmUucG9kLHYgMS45IDIwMTYvMDcvMTkgMDk6MjQ6MjkgcmJvIEV4cCAkCgo9aGVhZDEgR2VuZXJhbAoKVGhpcyBwYWNrYWdlIHByb3ZpZGVzIGEgbW9yZSBmbGV4aWJsZSBhbmQgbW9yZSBnZW5lcmFsIGFwcHJvYWNoIGZvciBleHRlbnNpb25zIG9mIGV4dGVuc2lvbnMgdGhhbiB0aGUgY29tbW9uICJDdXN0b20iLWZvbGRlciBvZiBPVFJTIGl0c2VsZi4gS0lYQ29yZSAoYXMgdGhlIGN1c3RvbSBmb2xkZXIgaXRzZWxmKSBpcyB0aGUgY29udGludWVkIGRldmVsb3BtZW50IG9mIHRoZSBwcmV2aW91cyB0c3VuYW1pIGFwcHJvYWNoIHRvIGV4dGVuZCBvdGhlciBPVFJTLWV4dGVuc2lvbnMuIEVtcGxveWluZyAidXNlIGxpYiIgaW5zdGVhZCBvZiAidW5zaGlmdCBASU5DIiBwcm92aWRlcyBtb3JlIHN0YWJpbGl0eSBhbmQgcmVkdWNlZCBjb21wbGV4aXR5LiBUaGVyZWZvcmUgZWFjaCBleHRlbnNpb24gcmVxdWlyZXMgYSBtb2RpZmljYXRpb24gb2YgS2VybmVsL0NvbmZpZy5wbSBhbmQgc2NyaXB0cy9hcGFjaGUyLXBlcmwtc3RhcnR1cC5wbC4gVGhpcyBjYW4gYmUgZG9uZSBhdXRvbWF0aWNhbGx5IGJ5IEtJWFV0aWxzOjpSZWdpc3RlckN1c3RvbVBhY2thZ2UuIEVhY2ggdGltZSBhIG5ldyBjdXN0b20gZm9sZGVyIGlzIHJlZ2lzdGVyZWQsIGEgYmFja3VwIG9mIHRoZSBtb2RpZmllZCBmaWxlIENvbmZpZy5wbSBvciBhcGFjaGUyLXBlcmwtc3RhcnR1cC5wbCB3aXRoIGEgdGltZXN0YW1wIHN1ZmZpeCBpcyB3cml0dGVuLgoKWW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZyBPVFJTIGNvbnNvbGUgY29tbWFuZHMgdG8gbGlzdCBjdXN0b20gZm9sZGVycywgcmVnaXN0ZXIgb3IgdW5yZWdpc3RlciBhIGN1c3RvbSBmb2xkZXIgYnV0IGFjdHVhbGx5IHRoaXMgc2hvdWxkIGJlIGRvbmUgYnkgdGhlIHBhY2thZ2UgaW5zdGFsbGF0aW9uIHByb2Nlc3M6Cgo9aXRlbSAqIEFkbWluOjpNdWx0aXBsZUN1c3RvbVBhY2thZ2VzOjpMaXN0Cj1pdGVtICogQWRtaW46Ok11bHRpcGxlQ3VzdG9tUGFja2FnZXM6OlJlYnVpbGQKPWl0ZW0gKiBBZG1pbjo6TXVsdGlwbGVDdXN0b21QYWNrYWdlczo6UmVnaXN0ZXIKPWl0ZW0gKiBBZG1pbjo6TXVsdGlwbGVDdXN0b21QYWNrYWdlczo6VW5yZWdpc3RlcgoKSU1QT1JUQU5UOiBpZiB5b3UncmUgdXNpbmcgbW9kLXBlcmwgYSB3ZWJzZXJ2ZXIgcmVzdGFydCBpcyByZXF1aXJlZCBhZnRlciB0aGUgbW9kaWZpY2F0aW9uIG9mIGFwYWNoZTItcGVybC1zdGFydHVwLiBPdGhlcndpc2UsIG5vIGZ1cnRoZXIgY3VzdG9tIHBhY2thZ2VzIGluIHlvdXIgY3VzdG9tIG1vZGlmaWNhdGlvbiB3aWxsIGJlIGZvdW5kLiBVc2luZyBhIGZ1bmN0aW9uIG9mIHlvdXIgY3VzdG9tIGV4dGVuc2lvbiB1cG9uIGluc3RhbGxhdGlvbiAodHlwZSAicG9zdCIpIHdpbGwgTk9UIHdvcmssIHNpbmNlIEBJTkMgZG9lcyBub3QgY29udGFpbiB5b3VyIGN1c3RvbSBkaXJlY3RvcnkgeWV0LiBJbiBvcmRlciB0byB1c2UgY3VzdG9tIGZ1bmN0aW9ucyBpbW1lZGlhdGVseSBvbiBpbnN0YWxsYXRpb24geW91IG5lZWQgdG8gaW5zdGFsbCB0aGUgZXh0ZW5zaW9uIHZpYSBjb21tYW5kIGxpbmUuCgpUaGUgY29tbW9uIGZvbGRlciAiQ3VzdG9tIiBhbGxvd3MgdG8gb3ZlcndyaXRlIGFuIGV4aXN0aW5nIGZpbGUgb2YgYW4gYWxyZWFkeSBpbnN0YWxsZWQgcGFja2FnZSBvbmNlLiBJZiB5b3UgaW5zdGFsbGVkIGFub3RoZXIgZXh0ZW5zaW9uLCB5b3Ugd291bGQgZW5jb3VudGVyIHRoZSBzYW1lIHByb2JsZW0gYXMgaWYgeW91IGhhZCBubyAiQ3VzdG9tIiBmb2xkZXIuIFRoaXMgZHJhd2JhY2sgaXMgcmVzb2x2ZWQgd2l0aCBLSVhDb3JlLiBGdXJ0aGVybW9yZSB0aGUgY29tbW9uIEN1c3RvbS1mb2xkZXIgb2YgT1RSUyBkb2VzIG5vdCBhZmZlY3QgZm9sbG93aW5nIGZpbGVzL2l0ZW1zICh5ZXQpLiBCeSBleHRlbmRpbmcgdGhlIGN1c3RvbS1mb2xkZXIgYXBwcm9hY2ggaXQgaXMgcG9zc2libGUgdG8gZWFzaWx5IGRpcy0gYW5kIGVuYWJsZSB3aG9sZSBPVFJTLWV4dGVuc2lvbnMgYnkgdW4tL3JlZ2lzdGVyaW5nIHRoZSBjb3JyZXNwb25kaW5nIGN1c3RvbSBmb2xkZXIuCgo9b3ZlciA0Cgo9aXRlbSAqIEtlcm5lbDo6U3lzdGVtOjpLSVhVdGlscwoKPW92ZXIgOAoKY29udGFpbnMgbWV0aG9kcyB0byB1bi0vcmVnaXN0ZXIgY3VzdG9tIHBhY2thZ2VzIGFuZCBhZGQvZGVsZXRlIG1vZGlmaWNhdGlvbnMgdG8vZnJvbSBLZXJuZWwvQ29uZmlnLnBtIGFuZCBzY3JpcHRzL2FwYWNoZTItcGVybC1zdGFydHVwLnBsCgo9YmFjawoKPWl0ZW0gKiBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Cgo9b3ZlciA4Cgpjb250YWlucyBtb2RpZmljYXRpb25zIHRvIHBsYWNlIGFuZCBhY2Nlc3MgdGVtcGxhdGUgZmlsZXMgYW5kIHRvIGxvYWQgc3ViIGxheW91dCBmaWxlcwoKPWJhY2sKCj1pdGVtICogS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dExvYWRlcgoKPW92ZXIgOAoKY29udGFpbnMgbW9kaWZpY2F0aW9ucyB0byB1c2UgS0lYIHBhdGhzIGZvciBza2lucwoKPWJhY2sKCj1pdGVtICogS2VybmVsOjpTeXN0ZW06OkxpbmtPYmplY3QKCj1vdmVyIDgKCnJlcXVpcmVkIG1vZGlmaWNhdGlvbiBzaW5jZSBtb2R1bGUgc2VhcmNoZXMgTGlua09iamVjdCBiYWNrZW5kcyBub3QgYmFzZWQgb24gQElOQyBidXQgb24gaGFyZCBjb2RlZCBmaWxlIHBhdGhzIC0gc2hvdWxkIGJlIGZleGVkIGluIGZ1dHVyZSBPVFJTIHJlbGVhc2VzCgo9YmFjawoKPWl0ZW0gKiBLZXJuZWw6OlN5c3RlbTo6U3lzQ29uZmlnCgo9b3ZlciA4Cgpjb250YWlucyBtb2RpZmljYXRpb25zIHRvIHBsYWNlIHhtbC1jb25maWd1cmF0aW9uIGZpbGVzIGluIGN1c3RvbSBmb2xkZXJzCgo9YmFjawoKPWl0ZW0gKiBLZXJuZWw6OlN5c3RlbTo6U3RhdHMKCj1vdmVyIDgKCmNvbnRhaW5zIG1vZGlmaWNhdGlvbnMgdG8gcGxhY2UgYW5kIGFjY2VzcyBzdGF0aWMgYW5kIGR5bmFtaWMgc3RhdHMgaW4gY3VzdG9tIGZvbGRlcnMKCj1iYWNrCgo9aXRlbSAqIEtlcm5lbDo6TGFuZ3VhZ2UKCj1vdmVyIDgKCmNvbnRhaW5zIG1vZGlmaWNhdGlvbnMgdG8gKHJlLSlwbGFjZSB0cmFuc2xhdGlvbiBmaWxlcyBieSBjdXN0b20gcGFja2FnZXMKCj1iYWNrCgo9aXRlbSAqIEN1c3RvbWVySGVhZGVyLmR0bCwgQ3VzdG9tZXJMb2dpbiwgZHRsLCBMb2dpbi5kdGwKCj1vdmVyIDgKCmNvbnRhaW4gbW9kaWZpY2F0aW9ucyB0byBidWlsZCBjb3JyZWN0IHBhdGhzIGluIGxpbmtzIHRvIGNzcyBhbnMganMgZmlsZXMgKG5lZWRlZCBmb3IgdHN1bmFtaSBhcHByb2FjaCkuCgo9YmFjawoKPWJhY2sKCj1oZWFkMSBDb3B5cmlnaHQKCktJWENvcmUgd3JpdHRlbi9lZGl0ZWQgYnk6Cgo9b3ZlciA0Cgo9aXRlbSAqIFJlbmUoZG90KUJvZWhtKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKCj1pdGVtICogTWFydGluKGRvdClCYWx6YXJlayhhdCljYXBlKGRhc2gpaXQoZG90KWRlCgo9aXRlbSAqIFRvcnN0ZW4oZG90KVRoYXUoYXQpY2FwZShkYXNoKWl0KGRvdClkZQoKPWl0ZW0gKiBBbm5hKGRvdClMaXR2aW5vdmEoYXQpY2FwZShkYXNoKWl0KGRvdClkZQoKPWJhY2sKClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KCj1jdXQK</File>
        <File Location="Kernel/System/KIXUtils.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/Language.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/Config/Files/KIXCore_Cache.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMCIgaW5pdD0iS0lYRnJhbWV3b3JrIj4KICAgIDxDVlM+JElkOiBLSVhDb3JlX0NhY2hlLnhtbCx2IDEuMTEgMjAxNS8wMi8wMyAwNzowMjoyOCBkZG9lcmZmZWwgRXhwICQ8L0NWUz4KCiAgICA8Q29uZmlnSXRlbSBOYW1lPSJDYWNoZTo6TW9kdWxlOjpNZW1jYWNoZWQjIyNTZXJ2ZXJzIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgdGhlIG1lbWNhY2hlZCBzZXJ2ZXJzLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPktJWENvcmU8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Db3JlOjpDYWNoZTwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxBcnJheT4KICAgICAgICAgICAgICAgIDxJdGVtPmxvY2FsaG9zdDoxMTIxMTwvSXRlbT4KICAgICAgICAgICAgPC9BcnJheT4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iQ2FjaGU6Ok1vZHVsZTo6TWVtY2FjaGVkIyMjUGFyYW1ldGVycyIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EZWZpbmVzIGFsbCB0aGUgKGFkZGl0aW9uYWwpIG1lbWNhY2hlZCBwYXJhbWV0ZXJzLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPktJWENvcmU8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Db3JlOjpDYWNoZTwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJub3dhaXQiPjE8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9InV0ZjgiPjE8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iQ2FjaGU6Ok1vZHVsZTo6TWVtY2FjaGVkIyMjQ2FjaGVNZXRhSW5mbyIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EZWZpbmVzIGlmIG1ldGEgaW5mbyBhYm91dCB0aGUgY2FjaGVkIG9iamVjdHMgc2hvdWxkIGJlIHN0b3JlZC48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5LSVhDb3JlPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+Q29yZTo6Q2FjaGU8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8T3B0aW9uIFNlbGVjdGVkSUQ9IjEiPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIwIj5ObzwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iMSI+WWVzPC9JdGVtPgogICAgICAgICAgICA8L09wdGlvbj4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iQ2FjaGU6Ok1vZHVsZTo6TWVtY2FjaGVkIyMjT3ZlcnJpZGVUVEwiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+QWxsb3dzIG92ZXJyaWRpbmcgb2Ygb2JqZWN0L2NhY2hlIHR5cGUgcmVsYXRlZCBUVExzLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPktJWENvcmU8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Db3JlOjpDYWNoZTwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgoKICAgIDxDb25maWdJdGVtIE5hbWU9IkxvYWRlcjo6UHJlQ3JlYXRlZENhY2hlcyIgUmVxdWlyZWQ9IjEiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gTGFuZz0iZW4iPlByZS1jcmVhdGUgbG9hZGVyIGNhY2hlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPktJWENvcmU8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Db3JlOjpXZWI8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8T3B0aW9uIFNlbGVjdGVkSUQ9IjAiPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIwIj5ObzwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iMSI+WWVzPC9JdGVtPgogICAgICAgICAgICA8L09wdGlvbj4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CgoKPC9vdHJzX2NvbmZpZz4K</File>
        <File Location="KIXCore/Kernel/Config/Files/KIXCore_ConfigureCallHome.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMS4wIiBpbml0PSJBcHBsaWNhdGlvbiI+CiAgICA8Q1ZTPiRJZDogS0lYQ29yZV9Db25maWd1cmVDYWxsSG9tZS54bWwsdiAxLjIgMjAxNi8wMi8yNSAwODo0MjozNiBkZG9lcmZmZWwgRXhwICQ8L0NWUz4KCiAgICA8Q29uZmlnSXRlbSBOYW1lPSJQYWNrYWdlOjpDb25maWd1cmVDYWxsSG9tZVZlcmlmaWNhdGlvblBhdGgiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMCI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RW5hYmxlcyB0aGUgdW5yZXF1ZXN0ZWQgYXV0b21hdGljIGNvbW11bmljYXRpb24gb2YgaW5zdGFsbGVkIHBhY2thZ2VzIGFuZCBvdGhlciBzeXN0ZW0gZGV0YWlscyB0byB0aGUgcGF0aC48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5GcmFtZXdvcms8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Db3JlOjpQYWNrYWdlPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPFN0cmluZyBSZWdleD0iIj5odHRwczovL3Bhdi5vdHJzLmNvbS9vdHJzL3B1YmxpYy5wbDwvU3RyaW5nPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KCjwvb3Ryc19jb25maWc+Cg==</File>
        <File Location="KIXCore/Kernel/Language/de_KIXCore.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9kZV9LSVhDb3JlIC0gcHJvdmlkZXMgZ2VybWFuIGxhbmd1YWdlIHRyYW5zbGF0aW9uCiMgQ29weXJpZ2h0IChDKSAyMDA2LTIwMTYgYy5hLnAuZS4gSVQgR21iSCwgaHR0cDovL3d3dy5jYXBlLWl0LmRlCiMKIyB3cml0dGVuL2VkaXRlZCBieToKIyAqIEJlYXRyaWNlKGRvdClNdWVsbGVyKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgKiBSZW5lKGRvdClCb2VobShhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojICRJZDogZGVfS0lYQ29yZS5wbSx2IDEuMyAyMDE2LzAxLzIwIDEzOjQ0OjQ5IGRkb2VyZmZlbCBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQpwYWNrYWdlIEtlcm5lbDo6TGFuZ3VhZ2U6OmRlX0tJWENvcmU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CnVzZSB1dGY4OwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICBteSAkTGFuZyA9ICRTZWxmLT57VHJhbnNsYXRpb259OwoKICAgIHJldHVybiBpZiByZWYgJExhbmcgbmUgJ0hBU0gnOwoKICAgICMgJCRTVEFSVCQkCgogICAgJExhbmctPnsKICAgICAgICAnaW5mb3JtYXRpb246IGV2ZW4gdGhvdWdoIHRoaXMgcGFja2FnZSBpcyBub3QgY2VydGlmaWVkIGJ5IE9UUlMgR3JvdXAsIHRoaXMgZG9lcyBOT1QgbWVhbiB0aGF0IHlvdSBzaG91bGQgTk9UIHVzZSBpdC4nCiAgICAgICAgfQogICAgICAgID0gJ1Bha2V0IGlzdCB6d2FyIG5pY2h0IGR1cmNoIE9UUlMgR3J1cHBlIHZlcmlmaXppZXJ0IC0gZGFzIGJlZGV1dGV0IGFiZXIgTklDSFQsIGRhc3MgZGllc2VzIFBha2V0IG5pY2h0IHZlcndlbmRldCB3ZXJkZW4ga2FubiBvZGVyIGRhcmYuJzsKICAgICRMYW5nLT57CiAgICAgICAgJ0Rpc2FibGVzIHRoZSB1bnJlcXVlc3RlZCBhdXRvbWF0aWMgY29tbXVuaWNhdGlvbiBvZiBpbnN0YWxsZWQgcGFja2FnZXMgYW5kIG90aGVyIHN5c3RlbSBkZXRhaWxzIHRvIE9UUlMgQUcuJwogICAgICAgIH0KICAgICAgICA9ICdEZWFrdGl2aWVydCBkaWUgdW5hdWZnZWZvcmRlcnRlIGF1dG9tYXRpc2NoZSBLb21tdW5pa2F0aW9uLCBkZXIgaW5zdGFsbGllcnRlbiBQYWtldGUgdW5kIGFuZGVyZXIgU3lzdGVtLURldGFpbHMsIHp1ciBPVFJTIEFHLic7CiAgICAkTGFuZy0+ewogICAgICAgICdFbmFibGVzIHRoZSB1bnJlcXVlc3RlZCBhdXRvbWF0aWMgY29tbXVuaWNhdGlvbiBvZiBpbnN0YWxsZWQgcGFja2FnZXMgYW5kIG90aGVyIHN5c3RlbSBkZXRhaWxzIHRvIHRoZSBwYXRoLicKICAgICAgICB9CiAgICAgICAgPSAnQWt0aXZpZXJ0IGRpZSB1bmF1ZmdlZm9yZGVydGUgYXV0b21hdGlzY2hlIEtvbW11bmlrYXRpb24sIGRlciBpbnN0YWxsaWVydGVuIFBha2V0ZSB1bmQgYW5kZXJlciBTeXN0ZW0tRGV0YWlscywgenVtIGFuZ2VnZWJlbmVuIFBmYWQuJzsKICAgICRMYW5nLT57CiAgICAgICAgJ0V2ZW4gdGhvdWdoIHRoaXMgcGFja2FnZSBpcyBub3QgY2VydGlmaWVkIGJ5IE9UUlMgR3JvdXAsIHRoaXMgZG9lcyBOT1QgbWVhbiB0aGF0IHlvdSBzaG91bGQgTk9UIHVzZSBpdC4nCiAgICAgICAgfQogICAgICAgID0gJ0RhcyBQYWtldCBpc3QgendhciBuaWNodCBkdXJjaCBPVFJTIEdydXBwZSB2ZXJpZml6aWVydCAtIGRhcyBiZWRldXRldCBhYmVyIE5JQ0hULCBkYXNzIGRpZXNlcyBQYWtldCBuaWNodCB2ZXJ3ZW5kZXQgd2VyZGVuIGthbm4gb2RlciBkYXJmLic7CgogICAgJExhbmctPnsnUHJlLWNyZWF0ZSBsb2FkZXIgY2FjaGUuJ30gPSAnTG9hZGVyY2FjaGUgdm9yZ2VuZXJpZXJlbi4nOwoKICAgICMgJCRTVE9QJCQKCiAgICByZXR1cm4gMDsKfQoKMTsK</File>
        <File Location="KIXCore/Kernel/Modules/AdminPackageManager.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/Output/HTML/Layout.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/Output/HTML/Layout/Loader.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/Output/HTML/Layout/Template.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/Output/Template/Provider.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyBLSVhDb3JlLUV4dGVuc2lvbnMgQ29weXJpZ2h0IChDKSAyMDA2LTIwMTYgYy5hLnAuZS4gSVQgR21iSCwgaHR0cDovL3d3dy5jYXBlLWl0LmRlCiMKIyB3cml0dGVuL2VkaXRlZCBieToKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OlRlbXBsYXRlOjpQcm92aWRlcjsKIyMgbm8gY3JpdGljKFBlcmw6OkNyaXRpYzo6UG9saWN5OjpPVFJTOjpSZXF1aXJlQ2FtZWxDYXNlKQojIyBub2ZpbHRlcihUaWR5QWxsOjpQbHVnaW46Ok9UUlM6OlBlcmw6OlN5bnRheENoZWNrKSAjIGJhaWxzIG9uIFRUIENvbnN0YW50cwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcgKFRlbXBsYXRlOjpQcm92aWRlcik7Cgp1c2UgU2NhbGFyOjpVdGlsIHF3KCk7CnVzZSBUZW1wbGF0ZTo6Q29uc3RhbnRzOwoKdXNlIEtlcm5lbDo6T3V0cHV0OjpUZW1wbGF0ZTo6RG9jdW1lbnQ7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OkNvbmZpZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OkNhY2hlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6RW5jb2RlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TWFpbicsCik7CgojIEZvcmNlIHRoZSB1c2Ugb2Ygb3VyIG93biBkb2N1bWVudCBjbGFzcy4KJFRlbXBsYXRlOjpQcm92aWRlcjo6RE9DVU1FTlQgPSAnS2VybmVsOjpPdXRwdXQ6OlRlbXBsYXRlOjpEb2N1bWVudCc7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpPdXRwdXQ6OlRlbXBsYXRlOjpQcm92aWRlciAtIFRlbXBsYXRlIFRvb2xraXQgY3VzdG9tIHByb3ZpZGVyCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gT1RSU0luaXQoKQoKcGVyZm9ybXMgc29tZSBwb3N0LWluaXRpYWxpemF0aW9uIGFuZCBjcmVhdGVzIGEgYnJpZGdldCBiZXR3ZWVuIFRlbXBsYXRlOjpUb29sa2l0CmFuZCBPVFJTIGJ5IGFkZGluZyB0aGUgT1RSUyBvYmplY3RzIHRvIHRoZSBQcm92aWRlciBvYmplY3QuIFRoaXMgbWV0aG9kIG11c3QgYmUKY2FsbGVkIGFmdGVyIGluc3RhbnRpYXRpbmcgdGhlIFByb3ZpZGVyIG9iamVjdC4KClBsZWFzZSBub3RlIHRoYXQgd2Ugb25seSBzdG9yZSBhIHdlYWsgcmVmZXJlbmNlIHRvIHRoZSBMYXlvdXRPYmplY3QgdG8gYXZvaWQgcmluZwpyZWZlcmVuY2VzLgoKPWN1dAoKc3ViIE9UUlNJbml0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBEb24ndCBmZXRjaCBMYXlvdXRPYmplY3QgdmlhIE9iamVjdE1hbmFnZXIgYXMgdGhlcmUgbWlnaHQgYmUgc2V2ZXJhbCBpbnN0YW5jZXMgaW52b2x2ZWQKICAgICMgICBhdCB0aGlzIHBvaW50IChmb3IgZXhhbXBsZSBpbiBMaW5rT2JqZWN0IHRoZXJlIGlzIGFuIG93biBMYXlvdXRPYmplY3QgdG8gYXZvaWQgYmxvY2sKICAgICMgICBuYW1lIGNvbGxpc2lvbnMpLgogICAgJFNlbGYtPntMYXlvdXRPYmplY3R9ID0gJFBhcmFte0xheW91dE9iamVjdH0gfHwgZGllICJHb3Qgbm8gTGF5b3V0T2JqZWN0ISI7CgogICAgIwogICAgIyBTdG9yZSBhIHdlYWsgcmVmZXJlbmNlIHRvIHRoZSBMYXlvdXRPYmplY3QgdG8gYXZvaWQgcmluZyByZWZlcmVuY2VzLgogICAgIyAgIFdlIG5lZWQgaXQgZm9yIHRoZSBmaWx0ZXJzLgogICAgIwogICAgU2NhbGFyOjpVdGlsOjp3ZWFrZW4oICRTZWxmLT57TGF5b3V0T2JqZWN0fSApOwoKICAgICMgZGVmaW5lIGNhY2hlIHR5cGUKICAgICRTZWxmLT57Q2FjaGVUeXBlfSA9ICdUZW1wbGF0ZVByb3ZpZGVyJzsKCiAgICAjIGNhY2hpbmcgY2FuIGJlIGRpc2FibGVkIGZvciBkZWJ1Z2dpbmcgcmVhc29ucwogICAgJFNlbGYtPntDYWNoaW5nRW5hYmxlZH0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ0Zyb250ZW5kOjpUZW1wbGF0ZUNhY2hlJykgLy8gMTsKCiAgICAjIEtJWENvcmUtY2FwZUlUCiAgICAjCiAgICAjIFByZS1jb21wdXRlIHRoZSBsaXN0IG9mIG5vdCBjYWNoZWFibGUgVGVtcGxhdGVzLiBJZiBhIHByZS1vdXRwdXQgZmlsdGVyIGlzCiAgICAjICAgcmVnaXN0ZXJlZCBmb3IgYSBwYXJ0aWN1bGFyIG9yIGZvciBhbGwgdGVtcGxhdGVzLCB0aGUgdGVtcGxhdGUgY2Fubm90IGJlCiAgICAjICAgY2FjaGVkIGFueSBtb3JlLgogICAgIwogICAgJFNlbGYtPntGaWx0ZXJFbGVtZW50UHJlfSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyktPkdldCgnRnJvbnRlbmQ6Ok91dHB1dDo6RmlsdGVyRWxlbWVudFByZScpOwoKICAgIG15ICVVbmNhY2hlYWJsZVRlbXBsYXRlczsKCiAgICBteSAlRmlsdGVyTGlzdCA9ICV7ICRTZWxmLT57RmlsdGVyRWxlbWVudFByZX0gfHwge30gfTsKCiAgICBGSUxURVI6CiAgICBmb3IgbXkgJEZpbHRlciAoIHNvcnQga2V5cyAlRmlsdGVyTGlzdCApIHsKCiAgICAgICAgIyBleHRyYWN0IGZpbHRlciBjb25maWcKICAgICAgICBteSAkRmlsdGVyQ29uZmlnID0gJEZpbHRlckxpc3R7JEZpbHRlcn07CgogICAgICAgIG5leHQgRklMVEVSIGlmICEkRmlsdGVyQ29uZmlnOwogICAgICAgIG5leHQgRklMVEVSIGlmIHJlZiAkRmlsdGVyQ29uZmlnIG5lICdIQVNIJzsKCiAgICAgICAgIyBleHRyYWN0IHRlbXBsYXRlIGxpc3QKICAgICAgICBteSAlVGVtcGxhdGVMaXN0ID0gJXsgJEZpbHRlckNvbmZpZy0+e1RlbXBsYXRlc30gfHwge30gfTsKCiAgICAgICAgaWYgKCAhJVRlbXBsYXRlTGlzdCApIHsKCiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4KICAgICAgICAgICAgICAgICAgICAiUGxlYXNlIGFkZCBhIHRlbXBsYXRlIGxpc3QgdG8gb3V0cHV0IGZpbHRlciAkRmlsdGVyQ29uZmlnLT57TW9kdWxlfSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLiIsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBuZXh0IEZJTFRFUjsKICAgICAgICB9CiAgICAgICAgZWxzaWYgKCAkVGVtcGxhdGVMaXN0e0FMTH0gKSB7CgogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiA8PEVPRiwKJEZpbHRlckNvbmZpZy0+e01vZHVsZX0gd2FudHMgdG8gb3BlcmF0ZSBvbiBBTEwgdGVtcGxhdGVzLgpUaGlzIHdpbGwgcHJvaGliaXQgdGhlIHRlbXBsYXRlcyBmcm9tIGJlaW5nIGNhY2hlZCBhbmQgY2FuIHRoZXJlZm9yZSBsZWFkIHRvIHNlcmlvdXMgcGVyZm9ybWFuY2UgaXNzdWVzLgpFT0YKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIG5leHQgRklMVEVSOwogICAgICAgIH0KCiAgICAgICAgQFVuY2FjaGVhYmxlVGVtcGxhdGVzeyBrZXlzICVUZW1wbGF0ZUxpc3QgfSA9IHZhbHVlcyAlVGVtcGxhdGVMaXN0OwogICAgfQoKICAgICMgbWFwIGZpbHRlcmVkIHRlbXBsYXRlIG5hbWVzIHRvIHJlYWwgdHQgbmFtZXMgKGV4Y2VwdCAnQUxMJyBwbGFjZWhvbGRlcikKICAgICVVbmNhY2hlYWJsZVRlbXBsYXRlcyA9CiAgICAgICAgbWFwIHsgJF8gZXEgJ0FMTCcgPyAnQUxMJyA6ICRfIC4gJy50dCcgPT4gJFVuY2FjaGVhYmxlVGVtcGxhdGVzeyRffSB9CiAgICAgICAga2V5cyAlVW5jYWNoZWFibGVUZW1wbGF0ZXM7CgogICAgJFNlbGYtPntVbmNhY2hlYWJsZVRlbXBsYXRlc30gPSBcJVVuY2FjaGVhYmxlVGVtcGxhdGVzOwogICAgIyBFTyBLSVhDb3JlLWNhcGVJVAp9Cgo9aXRlbSBfZmV0Y2goKQoKdHJ5IHRvIGdldCBhIGNvbXBpbGVkIHZlcnNpb24gb2YgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBDYWNoZU9iamVjdCwKb3RoZXJ3aXNlIGNvbXBpbGUgdGhlIHRlbXBsYXRlIGFuZCByZXR1cm4gaXQuCgpDb3BpZWQgYW5kIHNsaWdodGx5IGFkYXB0ZWQgZnJvbSBUZW1wbGF0ZTo6UHJvdmlkZXIuCgpBIG5vdGUgYWJvdXQgY2FjaGluZzogd2UgaGF2ZSB0aHJlZSBsZXZlbHMgb2YgY2FjaGluZy4KCiAgICAxLiB3ZSBoYXZlIGFuIGluLW1lbW9yeSBjYWNoZSB0aGF0IHN0b3JlcyB0aGUgY29tcGlsZWQgRG9jdW1lbnQgb2JqZWN0cyAoZmFzdGVzdCkuCiAgICAyLiB3ZSBzdG9yZSB0aGUgcGFyc2VkIGRhdGEgaW4gdGhlIENhY2hlT2JqZWN0IHRvIGJlIHJlLXVzZWQgaW4gYW5vdGhlciByZXF1ZXN0LgogICAgMy4gZm9yIHN0cmluZyB0ZW1wbGF0ZXMsIHdlIGhhdmUgYW4gaW4tbWVtb3J5IGNhY2hlIGluIHRoZSBwYXJzaW5nIG1ldGhvZCBfY29tcGlsZSgpLgogICAgICAgIEl0IHdpbGwgcmV0dXJuIHRoZSBhbHJlYWR5IHBhcnNlZCBvYmplY3QgaWYgaXQgc2VlcyB0aGUgc2FtZSB0ZW1wbGF0ZSBjb250ZW50IGFnYWluLgoKPWN1dAoKc3ViIF9mZXRjaCB7CiAgICBteSAoICRzZWxmLCAkbmFtZSwgJHRfbmFtZSApID0gQF87CiAgICBteSAkc3RhdF90dGwgPSAkc2VsZi0+e1NUQVRfVFRMfTsKCiAgICAkc2VsZi0+ZGVidWcoIl9mZXRjaCgkbmFtZSkiKSBpZiAkc2VsZi0+e0RFQlVHfTsKCiAgICAjIEtJWENvcmUtY2FwZUlUCiAgICBteSAkVGVtcGxhdGVJc0NhY2hlYWJsZSA9ICEkc2VsZi0+e1VuY2FjaGVhYmxlVGVtcGxhdGVzfS0+e0FMTH0gJiYgISRzZWxmLT57VW5jYWNoZWFibGVUZW1wbGF0ZXN9LT57JHRfbmFtZX07CiAgICAjIEVPIEtJWENvcmUtY2FwZUlUCgogICAgIyBDaGVjayBpbi1tZW1vcnkgdGVtcGxhdGUgY2FjaGUgaWYgd2UgYWxyZWFkeSBoYWQgdGhpcyB0ZW1wbGF0ZS4KICAgICRzZWxmLT57X1RlbXBsYXRlQ2FjaGV9IC8vPSB7fTsKCiAgICAjIEtJWENvcmUtY2FwZUlUCiAgICAjIGlmICggJHNlbGYtPntfVGVtcGxhdGVDYWNoZX0tPnskbmFtZX0gKSB7CiAgICBpZiAoICRUZW1wbGF0ZUlzQ2FjaGVhYmxlICYmICRzZWxmLT57X1RlbXBsYXRlQ2FjaGV9LT57JG5hbWV9ICkgewogICAgIyBFTyBLSVhDb3JlLWNhcGVJVAogICAgICAgIHJldHVybiAkc2VsZi0+e19UZW1wbGF0ZUNhY2hlfS0+eyRuYW1lfTsKICAgIH0KCiAgICAjIFNlZSBpZiB3ZSBhbHJlYWR5IGtub3cgdGhlIHRlbXBsYXRlIGlzIG5vdCBmb3VuZAogICAgaWYgKCAkc2VsZi0+e05PVEZPVU5EfS0+eyRuYW1lfSApIHsKICAgICAgICByZXR1cm4gKCB1bmRlZiwgVGVtcGxhdGU6OkNvbnN0YW50czo6U1RBVFVTX0RFQ0xJTkVEICk7CiAgICB9CgogICAgIyBDaGVjayBpZiB0aGUgdGVtcGxhdGUgZXhpc3RzLCBpcyBjYWNoZWFibGUgYW5kIGlmIGEgY2FjaGVkIHZlcnNpb24gZXhpc3RzLgogICAgIyBLSVhDb3JlLWNhcGVJVAogICAgIyBpZiAoIC1lICRuYW1lICYmICRzZWxmLT57Q2FjaGluZ0VuYWJsZWR9ICkgewogICAgaWYgKCAtZSAkbmFtZSAmJiAkVGVtcGxhdGVJc0NhY2hlYWJsZSAmJiAkc2VsZi0+e0NhY2hpbmdFbmFibGVkfSApIHsKICAgICMgRU8gS0lYQ29yZS1jYXBlSVQKCiAgICAgICAgbXkgJHRlbXBsYXRlX210aW1lID0gJHNlbGYtPl90ZW1wbGF0ZV9tb2RpZmllZCgkbmFtZSk7CiAgICAgICAgbXkgJENhY2hlS2V5ICAgICAgID0gJHNlbGYtPl9jb21waWxlZF9maWxlbmFtZSgkbmFtZSkgLiAnOjonIC4gJHRlbXBsYXRlX210aW1lOwoKICAgICAgICAjIElzIHRoZXJlIGFuIHVwLXRvLWRhdGUgY29tcGlsZWQgdmVyc2lvbiBpbiB0aGUgY2FjaGU/CiAgICAgICAgbXkgJENhY2hlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPkdldCgKICAgICAgICAgICAgVHlwZSA9PiAkc2VsZi0+e0NhY2hlVHlwZX0sCiAgICAgICAgICAgIEtleSAgPT4gJENhY2hlS2V5LAogICAgICAgICk7CgogICAgICAgIGlmICggcmVmICRDYWNoZSApIHsKCiAgICAgICAgICAgIG15ICRjb21waWxlZF90ZW1wbGF0ZSA9ICRUZW1wbGF0ZTo6UHJvdmlkZXI6OkRPQ1VNRU5ULT5uZXcoJENhY2hlKTsKCiAgICAgICAgICAgICMgU3RvcmUgaW4tbWVtb3J5IGFuZCByZXR1cm4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlCiAgICAgICAgICAgIGlmICgkY29tcGlsZWRfdGVtcGxhdGUpIHsKCiAgICAgICAgICAgICAgICAjIE1ha2Ugc3VyZSB0ZW1wbGF0ZSBjYWNoZSBkb2VzIG5vdCBnZXQgdG9vIGJpZwogICAgICAgICAgICAgICAgaWYgKCBrZXlzICV7ICRzZWxmLT57X1RlbXBsYXRlQ2FjaGV9IH0gPiAxMDAwICkgewogICAgICAgICAgICAgICAgICAgICRzZWxmLT57X1RlbXBsYXRlQ2FjaGV9ID0ge307CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHNlbGYtPntfVGVtcGxhdGVDYWNoZX0tPnskbmFtZX0gPSAkY29tcGlsZWRfdGVtcGxhdGU7CgogICAgICAgICAgICAgICAgcmV0dXJuICRjb21waWxlZF90ZW1wbGF0ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBQcm9ibGVtIGxvYWRpbmcgY29tcGlsZWQgdGVtcGxhdGU6IHdhcm4gYW5kIGNvbnRpbnVlIHRvIGZldGNoIHNvdXJjZSB0ZW1wbGF0ZQogICAgICAgICAgICB3YXJuKCAkc2VsZi0+ZXJyb3IoKSwgIlxuIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGxvYWQgdGVtcGxhdGUgZnJvbSBzb3VyY2UKICAgIG15ICggJHRlbXBsYXRlLCAkZXJyb3IgKSA9ICRzZWxmLT5fbG9hZCggJG5hbWUsICR0X25hbWUgKTsKCiAgICBpZiAoJGVycm9yKSB7CgogICAgICAgICMgVGVtcGxhdGUgY291bGQgbm90IGJlIGZldGNoZWQuICBBZGQgdG8gdGhlIG5lZ2F0aXZlL25vdGZvdW5kIGNhY2hlLgogICAgICAgICRzZWxmLT57Tk9URk9VTkR9LT57JG5hbWV9ID0gdGltZTsKICAgICAgICByZXR1cm4gKCAkdGVtcGxhdGUsICRlcnJvciApOwogICAgfQoKICAgICMgY29tcGlsZSB0ZW1wbGF0ZSBzb3VyY2UKICAgICggJHRlbXBsYXRlLCAkZXJyb3IgKSA9ICRzZWxmLT5fY29tcGlsZSggJHRlbXBsYXRlLCAkc2VsZi0+X2NvbXBpbGVkX2ZpbGVuYW1lKCRuYW1lKSApOwoKICAgIGlmICgkZXJyb3IpIHsKCiAgICAgICAgIyByZXR1cm4gYW55IGNvbXBpbGUgdGltZSBlcnJvcgogICAgICAgIHJldHVybiAoICR0ZW1wbGF0ZSwgJGVycm9yICk7CiAgICB9CgogICAgIyBLSVhDb3JlLWNhcGVJVAogICAgaWYgKCRUZW1wbGF0ZUlzQ2FjaGVhYmxlKSB7CiAgICAjIEVPIEtJWENvcmUtY2FwZUlUCgogICAgICAgICMgTWFrZSBzdXJlIHRlbXBsYXRlIGNhY2hlIGRvZXMgbm90IGdldCB0b28gYmlnCiAgICAgICAgaWYgKCBrZXlzICV7ICRzZWxmLT57X1RlbXBsYXRlQ2FjaGV9IH0gPiAxMDAwICkgewogICAgICAgICAgICAkc2VsZi0+e19UZW1wbGF0ZUNhY2hlfSA9IHt9OwogICAgICAgIH0KCiAgICAgICAgJHNlbGYtPntfVGVtcGxhdGVDYWNoZX0tPnskbmFtZX0gPSAkdGVtcGxhdGUtPntkYXRhfTsKICAgICMgS0lYQ29yZS1jYXBlSVQKICAgIH0KICAgICMgRU8gS0lYQ29yZS1jYXBlSVQKCiAgICByZXR1cm4gJHRlbXBsYXRlLT57ZGF0YX07Cgp9Cgo9aXRlbSBfbG9hZCgpCgpjYWxscyBvdXIgcHJlIHByb2Nlc3NvciB3aGVuIGxvYWRpbmcgYSB0ZW1wbGF0ZS4KCkluaGVyaXRlZCBmcm9tIFRlbXBsYXRlOjpQcm92aWRlci4KCj1jdXQKCnN1YiBfbG9hZCB7CiAgICBteSAoICRTZWxmLCAkTmFtZSwgJEFsaWFzICkgPSBAXzsKCiAgICBteSBAUmVzdWx0ID0gJFNlbGYtPlNVUEVSOjpfbG9hZCggJE5hbWUsICRBbGlhcyApOwoKICAgICMgSWYgdGhlcmUgd2FzIG5vIGVycm9yLCBwcmUtcHJvY2VzcyBvdXIgdGVtcGxhdGUKICAgIGlmICggcmVmICRSZXN1bHRbMF0gKSB7CgogICAgICAgICRSZXN1bHRbMF0tPnt0ZXh0fSA9ICRTZWxmLT5fUHJlUHJvY2Vzc1RlbXBsYXRlQ29udGVudCgKICAgICAgICAgICAgQ29udGVudCAgICAgID0+ICRSZXN1bHRbMF0tPnt0ZXh0fSwKICAgICAgICAgICAgVGVtcGxhdGVGaWxlID0+ICRSZXN1bHRbMF0tPntuYW1lfSwKICAgICAgICApOwogICAgfQoKICAgIHJldHVybiBAUmVzdWx0Owp9Cgo9aXRlbSBfY29tcGlsZSgpCgpjb21waWxlcyBhIC50dCB0ZW1wbGF0ZSBpbnRvIGEgUGVybCBwYWNrYWdlIGFuZCB1c2VzIHRoZSBDYWNoZU9iamVjdAp0byBjYWNoZSBpdC4KCkNvcGllZCBhbmQgc2xpZ2h0bHkgYWRhcHRlZCBmcm9tIFRlbXBsYXRlOjpQcm92aWRlci4KCj1jdXQKCnN1YiBfY29tcGlsZSB7CiAgICBteSAoICRzZWxmLCAkZGF0YSwgJGNvbXBmaWxlICkgPSBAXzsKICAgIG15ICR0ZXh0ID0gJGRhdGEtPnt0ZXh0fTsKICAgIG15ICggJHBhcnNlZG9jLCAkZXJyb3IgKTsKCiAgICBpZiAoICRzZWxmLT57REVCVUd9ICkgewogICAgICAgICRzZWxmLT5kZWJ1ZygKICAgICAgICAgICAgIl9jb21waWxlKCRkYXRhLCAiLAogICAgICAgICAgICBkZWZpbmVkICRjb21wZmlsZSA/ICRjb21wZmlsZSA6ICc8bm8gY29tcGZpbGU+JywgJyknCiAgICAgICAgKTsKICAgIH0KCiAgICAjIENoZWNrIGluLW1lbW9yeSBwYXJzZXIgY2FjaGUgaWYgd2UgYWxyZWFkeSBoYWQgdGhpcyB0ZW1wbGF0ZSBjb250ZW50CiAgICAkc2VsZi0+e19QYXJzZXJDYWNoZX0gLy89IHt9OwoKICAgIGlmICggJHNlbGYtPntfUGFyc2VyQ2FjaGV9LT57JHRleHR9ICkgewogICAgICAgIHJldHVybiAkc2VsZi0+e19QYXJzZXJDYWNoZX0tPnskdGV4dH07CiAgICB9CgogICAgbXkgJHBhcnNlciA9ICRzZWxmLT57UEFSU0VSfQogICAgICAgIHx8PSBUZW1wbGF0ZTo6Q29uZmlnLT5wYXJzZXIoICRzZWxmLT57UEFSQU1TfSApCiAgICAgICAgfHwgcmV0dXJuICggVGVtcGxhdGU6OkNvbmZpZy0+ZXJyb3IoKSwgVGVtcGxhdGU6OkNvbnN0YW50czo6U1RBVFVTX0VSUk9SICk7CgogICAgIyBkaXNjYXJkIHRoZSB0ZW1wbGF0ZSB0ZXh0IC0gd2UgZG9uJ3QgbmVlZCBpdCBhbnkgbW9yZQogICAgZGVsZXRlICRkYXRhLT57dGV4dH07CgogICAgIyBjYWxsIHBhcnNlciB0byBjb21waWxlIHRlbXBsYXRlIGludG8gUGVybCBjb2RlCiAgICBpZiAoICRwYXJzZWRvYyA9ICRwYXJzZXItPnBhcnNlKCAkdGV4dCwgJGRhdGEgKSApIHsKCiAgICAgICAgJHBhcnNlZG9jLT57TUVUQURBVEF9ID0gewogICAgICAgICAgICAnbmFtZScgICAgPT4gJGRhdGEtPntuYW1lfSwKICAgICAgICAgICAgJ21vZHRpbWUnID0+ICRkYXRhLT57dGltZX0sCiAgICAgICAgICAgICV7ICRwYXJzZWRvYy0+e01FVEFEQVRBfSB9LAogICAgICAgIH07CgogICAgICAgICMgd3JpdGUgdGhlIFBlcmwgY29kZSB0byB0aGUgZmlsZSAkY29tcGZpbGUsIGlmIGRlZmluZWQKICAgICAgICBpZiAoJGNvbXBmaWxlKSB7CiAgICAgICAgICAgIG15ICRDYWNoZUtleSA9ICRjb21wZmlsZSAuICc6OicgLiAkZGF0YS0+e3RpbWV9OwoKICAgICAgICAgICAgaWYgKCAkc2VsZi0+e0NhY2hpbmdFbmFibGVkfSApIHsKICAgICAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScpLT5TZXQoCiAgICAgICAgICAgICAgICAgICAgVHlwZSAgPT4gJHNlbGYtPntDYWNoZVR5cGV9LAogICAgICAgICAgICAgICAgICAgIFRUTCAgID0+IDYwICogNjAgKiAyNCwKICAgICAgICAgICAgICAgICAgICBLZXkgICA9PiAkQ2FjaGVLZXksCiAgICAgICAgICAgICAgICAgICAgVmFsdWUgPT4gJHBhcnNlZG9jLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCAkZGF0YS0+e2RhdGF9ID0gJFRlbXBsYXRlOjpQcm92aWRlcjo6RE9DVU1FTlQtPm5ldygkcGFyc2Vkb2MpICkgewoKICAgICAgICAgICAgIyBNYWtlIHN1cmUgcGFyc2VyIGNhY2hlIGRvZXMgbm90IGdldCB0b28gYmlnCiAgICAgICAgICAgIGlmICgga2V5cyAleyAkc2VsZi0+e19QYXJzZXJDYWNoZX0gfSA+IDEwMDAgKSB7CiAgICAgICAgICAgICAgICAkc2VsZi0+e19QYXJzZXJDYWNoZX0gPSB7fTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHNlbGYtPntfUGFyc2VyQ2FjaGV9LT57JHRleHR9ID0gJGRhdGE7CgogICAgICAgICAgICByZXR1cm4gJGRhdGE7CiAgICAgICAgfQogICAgICAgICRlcnJvciA9ICRUZW1wbGF0ZTo6RG9jdW1lbnQ6OkVSUk9SOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJGVycm9yID0gVGVtcGxhdGU6OkV4Y2VwdGlvbi0+bmV3KCAncGFyc2UnLCAiJGRhdGEtPnsgbmFtZSB9ICIgLiAkcGFyc2VyLT5lcnJvcigpICk7CiAgICB9CgogICAgIyByZXR1cm4gU1RBVFVTX0VSUk9SLCBvciBTVEFUVVNfREVDTElORUQgaWYgd2UncmUgYmVpbmcgdG9sZXJhbnQKICAgIHJldHVybiAkc2VsZi0+e1RPTEVSQU5UfQogICAgICAgID8gKCB1bmRlZiwgVGVtcGxhdGU6OkNvbnN0YW50czo6U1RBVFVTX0RFQ0xJTkVEICkKICAgICAgICA6ICggJGVycm9yLCBUZW1wbGF0ZTo6Q29uc3RhbnRzOjpTVEFUVVNfRVJST1IgKQp9Cgo9aXRlbSBzdG9yZSgpCgppbmhlcml0ZWQgZnJvbSBUZW1wbGF0ZTo6UHJvdmlkZXIuIFRoaXMgZnVuY3Rpb24gb3ZlcnJpZGUganVzdCBtYWtlcyBzdXJlIHRoYXQgdGhlIG9yaWdpbmFsCmluLW1lbW9yeSBjYWNoZSBjYW5ub3QgYmUgdXNlZC4KCj1jdXQKCnN1YiBzdG9yZSB7CiAgICBteSAoICRTZWxmLCAkTmFtZSwgJERhdGEgKSA9IEBfOwoKICAgIHJldHVybiAkRGF0YTsgICAgIyBuby1vcAp9Cgo9aXRlbSBfUHJlUHJvY2Vzc1RlbXBsYXRlQ29udGVudCgpCgp0aGlzIGlzIG91ciB0ZW1wbGF0ZSBwcmUgcHJvY2Vzc29yLgoKSXQgaGFuZGxlcyBzb21lIE9UUlMgc3BlY2lmaWMgdGFncyBsaWtlIFslIEluc2VydFRlbXBsYXRlKCJUZW1wbGF0ZU5hbWUudHQiKSAlXQphbmQgYWxzbyBwZXJmb3JtcyBjb21waWxlLXRpbWUgY29kZSBpbmplY3Rpb24gKENoYWxsZW5nZVRva2VuIGVsZW1lbnQgaW50byBmb3JtcykuCgpCZXNpZGVzIHRoYXQsIGl0IGFsc28gbWFrZXMgc3VyZSB0aGUgdGVtcGxhdGUgaXMgdHJlYXRlZCBhcyBVVEY4LgoKVGhpcyBpcyBydW4gYXQgY29tcGlsZSB0aW1lLiBJZiBhIHRlbXBsYXRlIGlzIGNhY2hlZCwgdGhpcyBtZXRob2QgZG9lcyBub3QgaGF2ZSB0byBiZSBleGVjdXRlZCBvbiBpdAphbnkgbW9yZS4KCj1jdXQKCnN1YiBfUHJlUHJvY2Vzc1RlbXBsYXRlQ29udGVudCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRDb250ZW50ID0gJFBhcmFte0NvbnRlbnR9OwoKICAgICMgTWFrZSBzdXJlIHRoZSB0ZW1wbGF0ZSBpcyB0cmVhdGVkIGFzIHV0ZjguCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RW5jb2RlJyktPkVuY29kZUlucHV0KCBcJENvbnRlbnQgKTsKCiAgICBteSAkVGVtcGxhdGVGaWxlV2l0aG91dFRUID0gc3Vic3RyKCAkUGFyYW17VGVtcGxhdGVGaWxlfSwgMCwgLTMgKTsKCiAgICAjCiAgICAjIEluY2x1ZGUgb3RoZXIgdGVtcGxhdGVzIGludG8gdGhpcyBvbmUgYmVmb3JlIHBhcnNpbmcuCiAgICAjIFslIEluY2x1ZGVUZW1wbGF0ZSgiRGF0ZVBpY2tlci50dCIpICVdCiAgICAjCiAgICBteSAoICRSZXBsYWNlQ291bnRlciwgJFJlcGxhY2VkICk7CiAgICBkbyB7CiAgICAgICAgJFJlcGxhY2VkID0gJENvbnRlbnQgPX4gc3sKICAgICAgICAgICAgXFslIC0/IFxzKiBJbnNlcnRUZW1wbGF0ZSBcKCBccyogWyciXT8gKC4qPykgWyciXT8gXHMqIFwpIFxzKiAtPyAlXF1cbj8KICAgICAgICAgICAgfXsKICAgICAgICAgICAgICAgICMgTG9hZCB0aGUgdGVtcGxhdGUgdmlhIHRoZSBwcm92aWRlci4KICAgICAgICAgICAgICAgICMgV2UnbGwgdXNlIFNVUEVSOjpsb2FkIGhlcmUgYmVjYXVzZSB3ZSBkb24ndCBuZWVkIHRoZSBwcmVwcm9jZXNzaW5nIHR3aWNlLgogICAgICAgICAgICAgICAgbXkgJFRlbXBsYXRlQ29udGVudCA9ICgkU2VsZi0+U1VQRVI6OmxvYWQoJDEpKVswXTsKICAgICAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpFbmNvZGUnKS0+RW5jb2RlSW5wdXQoXCRUZW1wbGF0ZUNvbnRlbnQpOwoKICAgICAgICAgICAgICAgICMgUmVtb3ZlIGNvbW1lbnRlZCBsaW5lcyBhbHJlYWR5IGhlcmUgYmVjYXVzZSBvZiBwcm9ibGVtcyB3aGVuIHRoZSBJbnNlcnRUZW1wbGF0ZSB0YWcKICAgICAgICAgICAgICAgICMgICBpcyBub3Qgb24gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZS4KICAgICAgICAgICAgICAgICRUZW1wbGF0ZUNvbnRlbnQgPX4gcy9eIy4qXG4vL2dtOwogICAgICAgICAgICAgICAgJFRlbXBsYXRlQ29udGVudDsKICAgICAgICAgICAgfWVzbXhnOwoKICAgIH0gdW50aWwgKCAhJFJlcGxhY2VkIHx8ICsrJFJlcGxhY2VDb3VudGVyID4gMTAwICk7CgogICAgIyBLSVhDb3JlLWNhcGVJVAogICAgIwogICAgIyBwcmUgcHV0cHV0IGZpbHRlciBoYW5kbGluZwogICAgIwogICAgaWYgKCAkU2VsZi0+e0ZpbHRlckVsZW1lbnRQcmV9ICYmIHJlZiAkU2VsZi0+e0ZpbHRlckVsZW1lbnRQcmV9IGVxICdIQVNIJyApIHsKCiAgICAgICAgIyBleHRyYWN0IGZpbHRlciBsaXN0CiAgICAgICAgbXkgJUZpbHRlckxpc3QgPSAleyAkU2VsZi0+e0ZpbHRlckVsZW1lbnRQcmV9IH07CgogICAgICAgIEZJTFRFUjoKICAgICAgICBmb3IgbXkgJEZpbHRlciAoIHNvcnQga2V5cyAlRmlsdGVyTGlzdCApIHsKCiAgICAgICAgICAgICMgZXh0cmFjdCBmaWx0ZXIgY29uZmlnCiAgICAgICAgICAgIG15ICRGaWx0ZXJDb25maWcgPSAkRmlsdGVyTGlzdHskRmlsdGVyfTsKCiAgICAgICAgICAgIG5leHQgRklMVEVSIGlmICEkRmlsdGVyQ29uZmlnOwogICAgICAgICAgICBuZXh0IEZJTFRFUiBpZiByZWYgJEZpbHRlckNvbmZpZyBuZSAnSEFTSCc7CgogICAgICAgICAgICAjIGV4dHJhY3QgdGVtcGxhdGUgbGlzdAogICAgICAgICAgICBteSAlVGVtcGxhdGVMaXN0ID0gJXsgJEZpbHRlckNvbmZpZy0+e1RlbXBsYXRlc30gfHwge30gfTsKCiAgICAgICAgICAgIGlmICggISVUZW1wbGF0ZUxpc3QgKSB7CgogICAgICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgICAgICBNZXNzYWdlID0+CiAgICAgICAgICAgICAgICAgICAgICAgICJQbGVhc2UgYWRkIGEgdGVtcGxhdGUgbGlzdCB0byBvdXRwdXQgZmlsdGVyICRGaWx0ZXJDb25maWctPntNb2R1bGV9IHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuIiwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgbmV4dCBGSUxURVI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzaWYgKCAkVGVtcGxhdGVMaXN0e0FMTH0gKSB7CgogICAgICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiA8PEVPRiwKJEZpbHRlckNvbmZpZy0+e01vZHVsZX0gd2FudHMgdG8gb3BlcmF0ZSBvbiBBTEwgdGVtcGxhdGVzLgpUaGlzIHdpbGwgcHJvaGliaXQgdGhlIHRlbXBsYXRlcyBmcm9tIGJlaW5nIGNhY2hlZCBhbmQgY2FuIHRoZXJlZm9yZSBsZWFkIHRvIHNlcmlvdXMgcGVyZm9ybWFuY2UgaXNzdWVzLgpFT0YKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgbmV4dCBGSUxURVI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgb25seSBvcGVyYXRlIG9uIHJlYWwgZmlsZXMKICAgICAgICAgICAgbmV4dCBGSUxURVIgaWYgISRQYXJhbXtUZW1wbGF0ZUZpbGV9OwoKICAgICAgICAgICAgIyBjaGVjayB0ZW1wbGF0ZSBsaXN0CiAgICAgICAgICAgICMgS0lYQ29yZS1jYXBlSVQKICAgICAgICAgICAgIyBuZXh0IEZJTFRFUiBpZiAhJFRlbXBsYXRlTGlzdHskVGVtcGxhdGVGaWxlV2l0aG91dFRUfTsKICAgICAgICAgICAgbXkgJE1hdGNoID0gMDsKICAgICAgICAgICAgZm9yIG15ICRUZW1wbGF0ZSAoIGtleXMgJVRlbXBsYXRlTGlzdCApIHsKICAgICAgICAgICAgICAgIGlmICggJFRlbXBsYXRlRmlsZVdpdGhvdXRUVCA9fiBtLyRUZW1wbGF0ZS8gKSB7CiAgICAgICAgICAgICAgICAgICAgJE1hdGNoID0gMTsgCiAgICAgICAgICAgICAgICB9ICAKICAgICAgICAgICAgfQogICAgICAgICAgICBuZXh0IEZJTFRFUiBpZiAhJE1hdGNoOwogICAgICAgICAgICAjIEVPIEtJWENvcmUtY2FwZUlUCgogICAgICAgICAgICAjIGNoZWNrIGZpbHRlciBjb25zdHJ1Y3Rpb24KICAgICAgICAgICAgbmV4dCBGSUxURVIgaWYgISRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpNYWluJyktPlJlcXVpcmUoICRGaWx0ZXJDb25maWctPntNb2R1bGV9ICk7CgogICAgICAgICAgICAjIGNyZWF0ZSBuZXcgaW5zdGFuY2UKICAgICAgICAgICAgbXkgJE9iamVjdCA9ICRGaWx0ZXJDb25maWctPntNb2R1bGV9LT5uZXcoCiAgICAgICAgICAgICAgICBMYXlvdXRPYmplY3QgPT4gJFNlbGYtPntMYXlvdXRPYmplY3R9LAogICAgICAgICAgICApOwoKICAgICAgICAgICAgbmV4dCBGSUxURVIgaWYgISRPYmplY3Q7CgogICAgICAgICAgICAjIHJ1biBvdXRwdXQgZmlsdGVyCiAgICAgICAgICAgICRPYmplY3QtPlJ1bigKICAgICAgICAgICAgICAgICV7JEZpbHRlckNvbmZpZ30sCiAgICAgICAgICAgICAgICBEYXRhICAgICAgICAgPT4gXCRDb250ZW50LAogICAgICAgICAgICAgICAgVGVtcGxhdGVGaWxlID0+ICRUZW1wbGF0ZUZpbGVXaXRob3V0VFQgfHwgJycsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQogICAgIyBFTyBLSVhDb3JlLWNhcGVJVAoKICAgICMKICAgICMgUmVtb3ZlIERUTC1zdHlsZSBjb21tZW50cyAobGluZXMgc3RhcnRpbmcgd2l0aCAjKQogICAgIwogICAgJENvbnRlbnQgPX4gcy9eIy4qXG4vL2dtOwoKICAgICMKICAgICMgSW5zZXJ0IGEgQkxPQ0sgY2FsbCBpbnRvIHRoZSB0ZW1wbGF0ZS4KICAgICMgWyUgUmVuZGVyQmxvY2soJ2IxJykgJV0uLi5bJSBFTkQgJV0KICAgICMgYmVjb21lcwogICAgIyBbJSBQZXJmb3JtUmVuZGVyQmxvY2soJ2IxJykgJV1bJSBCTE9DSyAnYjEnICVdLi4uWyUgRU5EICVdCiAgICAjIFRoaXMgaXMgd2hhdCB3ZSBuZWVkOiBkZWZpbmUgdGhlIGJsb2NrIGFuZCBjYWxsIGl0IGZyb20gdGhlIFJlbmRlckJsb2NrIG1hY3JvCiAgICAjIHRvIHJlbmRlciBpdCBiYXNlZCBvbiBhdmFpbGFibGUgYmxvY2sgZGF0YSBmcm9tIHRoZSBmcm9udGVuZCBtb2R1bGVzLgogICAgIwogICAgJENvbnRlbnQgPX4gc3sKICAgICAgICBcWyUgLT8gXHMqIFJlbmRlckJsb2NrU3RhcnQgXCggXHMqIFsnIl0/ICguKj8pIFsnIl0/IFxzKiBcKSBccyogLT8gJVxdCiAgICAgICAgfXtbJSBQZXJmb3JtUmVuZGVyQmxvY2soIiQxIikgJV1bJSBCTE9DSyAiJDEiIC0lXX1zbXhnOwoKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgXFslIC0/IFxzKiBSZW5kZXJCbG9ja0VuZCBcKCBccyogWyciXT8gKC4qPykgWyciXT8gXHMqIFwpIFxzKiAtPyAlXF0KICAgICAgICB9e1slIEVORCAtJV19c214ZzsKCiAgICAjCiAgICAjIEFkZCBjaGFsbGVuZ2UgdG9rZW4gZmllbGQgdG8gYWxsIGludGVybmFsIGZvcm1zCiAgICAjCiAgICAjICg/IS4uLikgaXMgYSBuZWdhdGl2ZSBsb29rLWFoZWFkLCBzbyAibm90IGZvbGxvd2VkIGJ5IGh0dHBzPzoiCiAgICAjIFxLIGlzIGEgbmV3IGZlYXR1cmUgaW4gcGVybCA1LjEwIHdoaWNoIGV4Y2x1ZGVzIGFueXRoaW5nIHByaW9yCiAgICAjIHRvIGl0IGZyb20gYmVpbmcgaW5jbHVkZWQgaW4gdGhlIG1hdGNoLCB3aGljaCBtZWFucyB0aGUgc3RyaW5nCiAgICAjIG1hdGNoZWQgYmVmb3JlIGl0IGlzIG5vdCBiZWluZyByZXBsYWNlZCBhd2F5LgogICAgIyBwZXJmb3JtcyBiZXR0ZXIgdGhhbiBpbmNsdWRpbmcgJDEgaW4gdGhlIHN1YnN0aXR1dGlvbi4KICAgICMKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgICAgIDxmb3JtW148Pl0rYWN0aW9uPSIoPyFodHRwcz86KVteIl0qIltePD5dKj5cSwogICAgICAgIH17WyUgSUYgRW52KCJVc2VyQ2hhbGxlbmdlVG9rZW4iKSAlXTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkNoYWxsZW5nZVRva2VuIiB2YWx1ZT0iWyUgRW52KCJVc2VyQ2hhbGxlbmdlVG9rZW4iKSB8IGh0bWwgJV0iLz5bJSBFTkQgJV1bJSBJRiBFbnYoIlNlc3Npb25JRCIpICYmICFFbnYoIlNlc3Npb25JRENvb2tpZSIpICVdPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iWyUgRW52KCJTZXNzaW9uTmFtZSIpICVdIiB2YWx1ZT0iWyUgRW52KCJTZXNzaW9uSUQiKSB8IGh0bWwgJV0iLz5bJSBFTkQgJV19c214aWc7CgogICAgcmV0dXJuICRDb250ZW50OwoKfQoKPWl0ZW0gTWlncmF0ZURUTHRvVFQoKQoKdHJhbnNsYXRlcyBvbGQgRFRMIHRlbXBsYXRlIGNvbnRlbnQgdG8gVGVtcGxhdGU6OlRvb2xraXQgc3ludGF4LgoKICAgIG15ICRUVENvZGUgPSAkUHJvdmlkZXJPYmplY3QtPk1pZ3JhdGVEVEx0b1RUKCBDb250ZW50ID0+ICREVExDb2RlICk7CgpJZiBhbiBlcnJvciB3YXMgZm91bmQsIHRoaXMgbWV0aG9kIHdpbGwgZGllKCksIHNvIHBsZWFzZSB1c2UgZXZhbCBhcm91bmQgaXQuCgo9Y3V0CgpzdWIgTWlncmF0ZURUTHRvVFQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkQ29udGVudCA9ICRQYXJhbXtDb250ZW50fTsKCiAgICBteSAkSUQgPSAiW2EtekEtWjAtOTpfXC1dKyI7CgogICAgbXkgJFNhZmVBcnJyYXlBY2Nlc3MgPSBzdWIgewogICAgICAgIG15ICRJRCA9IHNoaWZ0OwogICAgICAgIGlmICggJElEICF+IG17XlthLXpBLVowLTlfXSskfXhtcyApIHsKICAgICAgICAgICAgcmV0dXJuICJpdGVtKFwiJElEXCIpIjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRJRDsKICAgIH07CgogICAgIyAkUXVvdGUgJENvbmZpZwogICAgJENvbnRlbnQgPX4gc3tcJFF1b3RleyJcJENvbmZpZ3siKCRJRCkifSJ9fXtbJSBDb25maWcoIiQxIikgfCBodG1sICVdfXNteGc7CgogICAgIyAkUXVvdGUgJEVudgogICAgJENvbnRlbnQgPX4gc3tcJFF1b3RleyJcJEVudnsiKCRJRCkifSJ9fXtbJSBFbnYoIiQxIikgfCBodG1sICVdfXNteGc7CgogICAgIyAkUXVvdGUgJERhdGEKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgICAgIFwkUXVvdGV7IlwkRGF0YXsiKCRJRCkifSJ9CiAgICAgICAgfQogICAgICAgIHsKICAgICAgICAgICAgJ1slIERhdGEuJyAuICRTYWZlQXJycmF5QWNjZXNzLT4oJDEpIC4gJyB8IGh0bWwgJV0nCiAgICAgICAgfWVzbXhnOwoKICAgICMgJFF1b3RlIHdpdGggbGVuZ3RoCiAgICAkQ29udGVudCA9fiBzewogICAgICAgICAgICBcJFF1b3RleyJcJERhdGF7IigkSUQpIn0iLFxzKiIoXGQrKSJ9CiAgICAgICAgfQogICAgICAgIHsKICAgICAgICAgICAgJ1slIERhdGEuJyAuICRTYWZlQXJycmF5QWNjZXNzLT4oJDEpIC4gIiB8IHRydW5jYXRlKCQyKSB8IGh0bWwgJV0iCiAgICAgICAgfWVzbXhnOwoKICAgICMgJFF1b3RlIHdpdGggZHluYW1pYyBsZW5ndGgKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgICAgIFwkUXVvdGV7IlwkRGF0YXsiKCRJRCkifSIsXHMqIlwkUT9EYXRheyIoJElEKSJ9In0KICAgICAgICB9CiAgICAgICAgewogICAgICAgICAgICAnWyUgRGF0YS4nIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAnIHwgdHJ1bmNhdGUoRGF0YS4nIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMikgLiAnKSB8IGh0bWwgJV0nCiAgICAgICAgfWVzbXhnOwoKICAgICMgJFF1b3RlIHdpdGggdHJhbnNsYXRlZCB0ZXh0IGFuZCBmaXhlZCBsZW5ndGgKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgICAgIFwkUXVvdGV7IlwkVGV4dHsiXCREYXRheyIoJElEKSJ9In0iLFxzKiIoXGQrKSJ9CiAgICAgICAgfQogICAgICAgIHsKICAgICAgICAgICAgJ1slIERhdGEuJyAuICRTYWZlQXJycmF5QWNjZXNzLT4oJDEpIC4gIiB8IFRyYW5zbGF0ZSB8IHRydW5jYXRlKCQyKSB8IGh0bWwgJV0iCiAgICAgICAgfWVzbXhnOwoKICAgICMgJFF1b3RlIHdpdGggdHJhbnNsYXRlZCB0ZXh0IGFuZCBkeW5hbWljIGxlbmd0aAogICAgJENvbnRlbnQgPX4gc3sKICAgICAgICAgICAgXCRRdW90ZXsiXCRUZXh0eyJcJERhdGF7IigkSUQpIn0ifSIsXHMqIlwkUT9EYXRheyIoJElEKSJ9In0KICAgICAgICB9CiAgICAgICAgewogICAgICAgICAgICAnWyUgRGF0YS4nIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAnIHwgVHJhbnNsYXRlIHwgdHJ1bmNhdGUoRGF0YS4nIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMikgLiAnKSB8IGh0bWwgJV0nCiAgICAgICAgfWVzbXhnOwoKICAgIG15ICRNaWdyYXRlVGV4dFRhZyA9IHN1YiB7CiAgICAgICAgbXkgJVBhcmFtICAgICAgID0gQF87CiAgICAgICAgbXkgJE1vZGUgICAgICAgID0gJFBhcmFte01vZGV9OyAgICAgICAgICAjIEhUTUwgb3IgSlNPTgogICAgICAgIG15ICRUZXh0ICAgICAgICA9ICRQYXJhbXtUZXh0fTsgICAgICAgICAgIyBUaGUgdHJhbnNsYXRlZCB0ZXh0CiAgICAgICAgbXkgJERvdCAgICAgICAgID0gJFBhcmFte0RvdH07ICAgICAgICAgICAjIENsb3NpbmcgZG90LCBzb21ldGltZXMgb3V0c2lkZSBvZiB0aGUgVGFnCiAgICAgICAgbXkgJFBhcmFtU3RyaW5nID0gJFBhcmFte1BhcmFtZXRlcnN9OyAgICAjIFBhcmFtZXRlcnMgdG8gaW50ZXJwb2xhdGUKCiAgICAgICAgbXkgJFJlc3VsdCA9ICdbJSAnOwoKICAgICAgICAjIFRleHQgY29udGFpbnMgYSB0YWcKICAgICAgICBpZiAoICRUZXh0ID1+IG17XCRUaW1lTG9uZ3siXCRRP0RhdGF7IigkSUQpIn0ifX1zbXggKSB7CiAgICAgICAgICAgICRSZXN1bHQgLj0gIlRyYW5zbGF0ZShMb2NhbGl6ZShEYXRhLiIgLiAkU2FmZUFycnJheUFjY2Vzcy0+KCQxKSAuICIsIFwiVGltZUxvbmdcIikiOwogICAgICAgIH0KICAgICAgICBlbHNpZiAoICRUZXh0ID1+IG17XCRUaW1lU2hvcnR7IlwkUT9EYXRheyIoJElEKSJ9In19c214ICkgewogICAgICAgICAgICAkUmVzdWx0IC49ICJUcmFuc2xhdGUoTG9jYWxpemUoRGF0YS4iIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAiLCBcIlRpbWVTaG9ydFwiKSI7CiAgICAgICAgfQogICAgICAgIGVsc2lmICggJFRleHQgPX4gbXtcJERhdGV7IlwkUT9EYXRheyIoJElEKSJ9In19c214ICkgewogICAgICAgICAgICAkUmVzdWx0IC49ICJUcmFuc2xhdGUoTG9jYWxpemUoRGF0YS4iIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAiLCBcIkRhdGVcIikiOwogICAgICAgIH0KICAgICAgICBlbHNpZiAoICRUZXh0ID1+IG17XCRRP0RhdGF7IigkSUQpIn19c214ICkgewogICAgICAgICAgICAkUmVzdWx0IC49ICJUcmFuc2xhdGUoRGF0YS4iIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAiIjsKICAgICAgICB9CiAgICAgICAgZWxzaWYgKCAkVGV4dCA9fiBte1wkQ29uZmlneyIoJElEKSJ9fXNteCApIHsKICAgICAgICAgICAgJFJlc3VsdCAuPSAiVHJhbnNsYXRlKENvbmZpZyhcIiQxXCIpIjsKICAgICAgICB9CiAgICAgICAgZWxzaWYgKCAkVGV4dCA9fiBte1wkUT9FbnZ7IigkSUQpIn19c214ICkgewogICAgICAgICAgICAkUmVzdWx0IC49ICJUcmFuc2xhdGUoRW52KFwiJDFcIikiOwogICAgICAgIH0KCiAgICAgICAgIyBQbGFpbiB0ZXh0CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRUZXh0ID1+IHN7In17XFwifXNteGc7ICAgICMgRXNjYXBlICIgc2lnbnMKICAgICAgICAgICAgaWYgKCAkUGFyYW17RG90fSApIHsKICAgICAgICAgICAgICAgICRUZXh0IC49ICRQYXJhbXtEb3R9OwogICAgICAgICAgICB9CiAgICAgICAgICAgICRSZXN1bHQgLj0gIlRyYW5zbGF0ZShcIiRUZXh0XCIiOwogICAgICAgIH0KCiAgICAgICAgbXkgQFBhcmFtZXRlcnMgPSBzcGxpdCBteyxccyp9LCAkUGFyYW1TdHJpbmc7CgogICAgICAgIFBBUkFNRVRFUjoKICAgICAgICBmb3IgbXkgJFBhcmFtZXRlciAoQFBhcmFtZXRlcnMpIHsKICAgICAgICAgICAgbmV4dCBQQVJBTUVURVIgaWYgKCAhJFBhcmFtZXRlciApOwogICAgICAgICAgICBpZiAoICRQYXJhbWV0ZXIgPX4gbXtcJFRpbWVMb25neyJcJFE/RGF0YXsiKCRJRCkifSJ9fXNteCApIHsKICAgICAgICAgICAgICAgICRSZXN1bHQgLj0gIiwgTG9jYWxpemUoRGF0YS4kMSwgXCJUaW1lTG9uZ1wiKSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzaWYgKCAkUGFyYW1ldGVyID1+IG17XCRUaW1lU2hvcnR7IlwkUT9EYXRheyIoJElEKSJ9In19c214ICkgewogICAgICAgICAgICAgICAgJFJlc3VsdCAuPSAiLCBMb2NhbGl6ZShEYXRhLiQxLCBcIlRpbWVTaG9ydFwiKSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzaWYgKCAkUGFyYW1ldGVyID1+IG17XCREYXRleyJcJFE/RGF0YXsiKCRJRCkifSJ9fXNteCApIHsKICAgICAgICAgICAgICAgICRSZXN1bHQgLj0gIiwgTG9jYWxpemUoRGF0YS4kMSwgXCJEYXRlXCIpIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNpZiAoICRQYXJhbWV0ZXIgPX4gbXtcJFE/RGF0YXsiKCRJRCkifX1zbXggKSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0IC49ICIsIERhdGEuJDEiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2lmICggJFBhcmFtZXRlciA9fiBte1wkQ29uZmlneyIoJElEKSJ9fXNteCApIHsKICAgICAgICAgICAgICAgICRSZXN1bHQgLj0gIiwgQ29uZmlnKFwiJDFcIikiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2lmICggJFBhcmFtZXRlciA9fiBte1wkUT9FbnZ7IigkSUQpIn19c214ICkgewogICAgICAgICAgICAgICAgJFJlc3VsdCAuPSAiLCBFbnYoXCIkMVwiKSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkUGFyYW1ldGVyID1+IHN7XiJ8IiR9e31zbXhnOyAgICAjIFJlbW92ZSBlbmNsb3NpbmcgIiIKICAgICAgICAgICAgICAgICRQYXJhbWV0ZXIgPX4gc3sifXtcXCJ9c214ZzsgICAgICMgRXNjYXBlICIgc2lnbnMgaW4gdGhlIHN0cmluZwogICAgICAgICAgICAgICAgJFJlc3VsdCAuPSAiLCBcIiRQYXJhbWV0ZXJcIiI7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggJE1vZGUgZXEgJ0pTT04nICkgewogICAgICAgICAgICAkUmVzdWx0IC49ICcpIHwgSlNPTiAlXSc7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUmVzdWx0IC49ICcpIHwgaHRtbCAlXSc7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJFJlc3VsdDsKICAgIH07CgogICAgbXkgJFRleHRPckRhdGEgPSAiIjsKCiAgICAjICRUZXh0CiAgICAkQ29udGVudCA9fiBzewogICAgICAgICAgICBcJFRleHR7CiAgICAgICAgICAgICAgICBbIiddCiAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgW15cJF0rPwogICAgICAgICAgICAgICAgICAgIHxcJFE/RGF0YXtcIiRJRFwifQogICAgICAgICAgICAgICAgICAgIHxcJENvbmZpZ3tcIiRJRFwifQogICAgICAgICAgICAgICAgICAgIHxcJFE/RW52e1wiJElEXCJ9CiAgICAgICAgICAgICAgICAgICAgfFwkVGltZUxvbmd7XCJcJFE/RGF0YXtcIiRJRFwifVwifQogICAgICAgICAgICAgICAgICAgIHxcJFRpbWVTaG9ydHtcIlwkUT9EYXRhe1wiJElEXCJ9XCJ9CiAgICAgICAgICAgICAgICAgICAgfFwkRGF0ZXtcIlwkUT9EYXRhe1wiJElEXCJ9XCJ9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBbIiddCiAgICAgICAgICAgICAgICAoKD86CiAgICAgICAgICAgICAgICAgICAgLFxzKlsiJ10KICAgICAgICAgICAgICAgICAgICAoPzoKICAgICAgICAgICAgICAgICAgICAgICAgW15cJF0rPwogICAgICAgICAgICAgICAgICAgICAgICB8XCRRP0RhdGF7XCIkSURcIn0KICAgICAgICAgICAgICAgICAgICAgICAgfFwkQ29uZmlne1wiJElEXCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIHxcJFE/RW52e1wiJElEXCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIHxcJFRpbWVMb25ne1wiXCRRP0RhdGF7XCIkSURcIn1cIn0KICAgICAgICAgICAgICAgICAgICAgICAgfFwkVGltZVNob3J0e1wiXCRRP0RhdGF7XCIkSURcIn1cIn0KICAgICAgICAgICAgICAgICAgICAgICAgfFwkRGF0ZXtcIlwkUT9EYXRhe1wiJElEXCJ9XCJ9CiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgWyInXSkqKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHsKICAgICAgICAgICAgJE1pZ3JhdGVUZXh0VGFnLT4oIE1vZGUgPT4gJ0hUTUwnLCBUZXh0ID0+ICQxLCBQYXJhbWV0ZXJzID0+ICQyKTsKICAgICAgICB9ZXNteGc7CgogICAgIyBkcm9wIGVtcHR5ICRUZXh0CiAgICAkQ29udGVudCA9fiBzeyBcJFRleHQgW3tdICIiIFt9XSB9e314bXNnOwoKICAgICMgJEpTVGV4dAogICAgJENvbnRlbnQgPX4gc3sKICAgICAgICAgICAgWyInXVwkSlNUZXh0ewogICAgICAgICAgICAgICAgWyInXQogICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgIFteXCRdKz8KICAgICAgICAgICAgICAgICAgICB8XCRRP0RhdGF7XCIkSURcIn0KICAgICAgICAgICAgICAgICAgICB8XCRDb25maWd7XCIkSURcIn0KICAgICAgICAgICAgICAgICAgICB8XCRRP0VudntcIiRJRFwifQogICAgICAgICAgICAgICAgICAgIHxcJFRpbWVMb25ne1wiXCRRP0RhdGF7XCIkSURcIn1cIn0KICAgICAgICAgICAgICAgICAgICB8XCRUaW1lU2hvcnR7XCJcJFE/RGF0YXtcIiRJRFwifVwifQogICAgICAgICAgICAgICAgICAgIHxcJERhdGV7XCJcJFE/RGF0YXtcIiRJRFwifVwifQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgWyInXQogICAgICAgICAgICAgICAgKCg/OgogICAgICAgICAgICAgICAgICAgICxccypbIiddCiAgICAgICAgICAgICAgICAgICAgKD86CiAgICAgICAgICAgICAgICAgICAgICAgIFteXCRdKz8KICAgICAgICAgICAgICAgICAgICAgICAgfFwkUT9EYXRhe1wiJElEXCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIHxcJENvbmZpZ3tcIiRJRFwifQogICAgICAgICAgICAgICAgICAgICAgICB8XCRRP0VudntcIiRJRFwifQogICAgICAgICAgICAgICAgICAgICAgICB8XCRUaW1lTG9uZ3tcIlwkUT9EYXRhe1wiJElEXCJ9XCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIHxcJFRpbWVTaG9ydHtcIlwkUT9EYXRhe1wiJElEXCJ9XCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIHxcJERhdGV7XCJcJFE/RGF0YXtcIiRJRFwifVwifQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIFsiJ10pKikKICAgICAgICAgICAgfQogICAgICAgICAgICAoLj8pWyInXQogICAgICAgIH0KICAgICAgICB7CiAgICAgICAgICAgICRNaWdyYXRlVGV4dFRhZy0+KCBNb2RlID0+ICdKU09OJywgVGV4dCA9PiAkMSwgUGFyYW1ldGVycyA9PiAkMiwgRG90ID0+ICQzKTsKICAgICAgICB9ZXNteGc7CgogICAgIyAkVGltZUxvbmcKICAgICRDb250ZW50ID1+IHN7XCRUaW1lTG9uZ3siXCRRP0RhdGF7IigkSUQpIn0ifX17WyUgRGF0YS4kMSB8IExvY2FsaXplKCJUaW1lTG9uZyIpICVdfXNteGc7CgogICAgIyAkVGltZVNob3J0CiAgICAkQ29udGVudCA9fiBze1wkVGltZVNob3J0eyJcJFE/RGF0YXsiKCRJRCkifSJ9fXtbJSBEYXRhLiQxIHwgTG9jYWxpemUoIlRpbWVTaG9ydCIpICVdfXNteGc7CgogICAgIyAkRGF0ZQogICAgJENvbnRlbnQgPX4gc3tcJERhdGV7IlwkUT9EYXRheyIoJElEKSJ9In19e1slIERhdGEuJDEgfCBMb2NhbGl6ZSgiRGF0ZSIpICVdfXNteGc7CgogICAgIyAkUURhdGEgd2l0aCBsZW5ndGgKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgICAgIFwkUURhdGF7IigkSUQpIixccyoiKFxkKykifQogICAgICAgIH0KICAgICAgICB7CiAgICAgICAgICAgICJbJSBEYXRhLiIgLiAkU2FmZUFycnJheUFjY2Vzcy0+KCQxKSAuICIgfCB0cnVuY2F0ZSgkMikgfCBodG1sICVdIgogICAgICAgIH1lc214ZzsKCiAgICAjIHNpbXBsZSAkUURhdGEKICAgICRDb250ZW50ID1+IHN7CiAgICAgICAgICAgIFwkUURhdGF7IigkSUQpIn0KICAgICAgICB9CiAgICAgICAgewogICAgICAgICAgICAiWyUgRGF0YS4iIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAiIHwgaHRtbCAlXSIKICAgICAgICB9ZXNteGc7CgogICAgIyAkTFFEYXRhCiAgICAkQ29udGVudCA9fiBzewogICAgICAgICAgICBcJExRRGF0YXsiKCRJRCkifQogICAgICAgIH0KICAgICAgICB7CiAgICAgICAgICAgICJbJSBEYXRhLiIgLiAkU2FmZUFycnJheUFjY2Vzcy0+KCQxKSAuICIgfCB1cmkgJV0iCiAgICAgICAgfWVzbXhnOwoKICAgICMgc2ltcGxlICREYXRhCiAgICAkQ29udGVudCA9fiBzewogICAgICAgICAgICBcJERhdGF7IigkSUQpIn0KICAgICAgICB9CiAgICAgICAgewogICAgICAgICAgICAiWyUgRGF0YS4iIC4gJFNhZmVBcnJyYXlBY2Nlc3MtPigkMSkgLiAiICVdIgogICAgICAgIH1lc214ZzsKCiAgICAjICRDb25maWcKICAgICRDb250ZW50ID1+IHN7XCRDb25maWd7IigkSUQpIn19e1slIENvbmZpZygiJDEiKSAlXX1zbXhnOwoKICAgICMgJEVudgogICAgJENvbnRlbnQgPX4gc3tcJEVudnsiKCRJRCkifX17WyUgRW52KCIkMSIpICVdfXNteGc7CgogICAgIyAkUUVudgogICAgJENvbnRlbnQgPX4gc3tcJFFFbnZ7IigkSUQpIn19e1slIEVudigiJDEiKSB8IGh0bWwgJV19c214ZzsKCiAgICAjIGR0bDpibG9jawogICAgbXkgJUJsb2NrU2VlbjsKICAgICRDb250ZW50ID1+IHN7PCEtLVxzKmR0bDpibG9jazooJElEKVxzKi0tPn17CiAgICAgICAgaWYgKCRCbG9ja1NlZW57JDF9KysgJSAyKSB7CiAgICAgICAgICAgICJbJSBSZW5kZXJCbG9ja0VuZChcIiQxXCIpICVdIjsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICJbJSBSZW5kZXJCbG9ja1N0YXJ0KFwiJDFcIikgJV0iOwogICAgICAgIH0KICAgIH1lc214ZzsKCiAgICAjIGR0bDpqc19vbl9kb2N1bWVudF9jb21wbGV0ZQogICAgJENvbnRlbnQgPX4gc3sKICAgICAgICAgICAgPCEtLVxzKmR0bDpqc19vbl9kb2N1bWVudF9jb21wbGV0ZVxzKi0tPiguKj8pPCEtLVxzKmR0bDpqc19vbl9kb2N1bWVudF9jb21wbGV0ZVxzKi0tPgogICAgICAgIH0KICAgICAgICB7CiAgICAgICAgICAgICJbJSBXUkFQUEVSIEpTT25Eb2N1bWVudENvbXBsZXRlICVdJHsxfVslIEVORCAlXSI7CiAgICAgICAgfWVzbXhnOwoKICAgICMgZHRsOmpzX29uX2RvY3VtZW50X2NvbXBsZXRlX2luc2VydAogICAgJENvbnRlbnQKICAgICAgICA9fiBzezwhLS1ccypkdGw6anNfb25fZG9jdW1lbnRfY29tcGxldGVfcGxhY2Vob2xkZXJccyotLT59e1slIFBST0NFU1MgSlNPbkRvY3VtZW50Q29tcGxldGVJbnNlcnQgJV19c214ZzsKCiAgICAjICRJbmNsdWRlCiAgICAkQ29udGVudCA9fiBze1wkSW5jbHVkZXsiKCRJRCkifX17WyUgSW5zZXJ0VGVtcGxhdGUoIiQxLnR0IikgJV19c214ZzsKCiAgICBteSAoICRDb3VudGVyLCAkRXJyb3JNZXNzYWdlICk7CiAgICBMSU5FOgogICAgZm9yIG15ICRMaW5lICggc3BsaXQgL1xuLywgJENvbnRlbnQgKSB7CiAgICAgICAgJENvdW50ZXIrKzsKCiAgICAgICAgIyBNYWtlIHN1cmUgdGhlcmUgYXJlIG5vIG1vcmUgRFRMIHRhZ3MgcHJlc2VudCBpbiB0aGUgY29kZS4KICAgICAgICBpZiAoICRMaW5lID1+IG17XCQoPzpMP1E/RGF0YXxRdW90ZXxDb25maWd8UT9FbnZ8VGltZXxEYXRlfFRleHR8SlNUZXh0fEluY2x1ZGUpXHt9eG1zICkgewogICAgICAgICAgICAkRXJyb3JNZXNzYWdlIC49ICJMaW5lICRDb3VudGVyOiAkTGluZVxuIjsKICAgICAgICB9CiAgICB9CgogICAgZGllICRFcnJvck1lc3NhZ2UgaWYgJEVycm9yTWVzc2FnZTsKCiAgICByZXR1cm4gJENvbnRlbnQ7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="KIXCore/Kernel/System/Cache/Memcached.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/System/Console/Command/Admin/MultipleCustomPackages/CleanUpConfigPm.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBUb3JzdGVuKGRvdClUaGF1KGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIFJlbmUoZG90KUJvZWhtKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6OkFkbWluOjpNdWx0aXBsZUN1c3RvbVBhY2thZ2VzOjpDbGVhblVwQ29uZmlnUG07Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgYmFzZSBxdyhLZXJuZWw6OlN5c3RlbTo6Q29uc29sZTo6QmFzZUNvbW1hbmQpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OktJWFV0aWxzJywKKTsKCnN1YiBDb25maWd1cmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAkU2VsZi0+RGVzY3JpcHRpb24oJ1Jlc3RvcmUgb2xkIENvbmZpZy5wbScpOwogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CiAgICAkU2VsZi0+UHJpbnQoIjx5ZWxsb3c+Tk9URTogc3RhcnQgdG8gcmVzdG9yZSBvbGQgJ0NvbmZpZy5wbSc8L3llbGxvdz5cbiIpOwoKICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycpLT5DbGVhblVwQ29uZmlnUG0oJVBhcmFtKTsKCiAgICAkU2VsZi0+UHJpbnQoIjxncmVlbj5Eb25lLjwvZ3JlZW4+XG4iKTsKICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVPaygpOwp9CgoxOwoK</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Admin/MultipleCustomPackages/List.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBUb3JzdGVuKGRvdClUaGF1KGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIFJlbmUoZG90KUJvZWhtKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6OkFkbWluOjpNdWx0aXBsZUN1c3RvbVBhY2thZ2VzOjpMaXN0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdMaXN0IGFsbCBjdXN0b20gcGFja2FnZXMuJyk7CiAgICByZXR1cm47Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKICAgICRTZWxmLT5QcmludCgKICAgICAgICAiPHllbGxvdz5OT1RFOiBUaGUgZm9sbG93aW5nIHBhY2thZ2VzIGFyZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBhbmQgc2hvdWxkICIKICAgICAgICAgICAgLiAiYXBwZWFyIGluIENvbmZpZy5wbSBhbmQgYXBhY2hlMi1wZXJsLXN0YXJ0dXAucGw6PC95ZWxsb3c+XG4iCiAgICApOwoKICAgIG15ICRSZWdpc3RlcmVkUGFja2FnZXMKICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycpLT5HZXRSZWdpc3RlcmVkQ3VzdG9tUGFja2FnZXMoJVBhcmFtKTsKICAgIGZvciBteSAkQ3VyclByaW9LZXkgKCBzb3J0KCBrZXlzKCAleyRSZWdpc3RlcmVkUGFja2FnZXN9ICkgKSApIHsKICAgICAgICBwcmludCAiXG5cdCAiIC4gJEN1cnJQcmlvS2V5OwogICAgfQogICAgcHJpbnQgIlxuXG4iOwoKICAgICRTZWxmLT5QcmludCgiPGdyZWVuPkRvbmUuPC9ncmVlbj5cbiIpOwogICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7Cn0KCjE7Cgo=</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Admin/MultipleCustomPackages/Rebuild.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBUb3JzdGVuKGRvdClUaGF1KGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIFJlbmUoZG90KUJvZWhtKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6OkFkbWluOjpNdWx0aXBsZUN1c3RvbVBhY2thZ2VzOjpSZWJ1aWxkOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdSZWJ1aWxkIGxpYnJhcnkgcGF0aHMnKTsKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgJFNlbGYtPlByaW50KCI8eWVsbG93Pk5PVEU6IHN0YXJ0IHRvIHJlYnVpbGQgbGlicmFyeSBwYXRoc1xuXG48L3llbGxvdz5cbiIpOwoKICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycpLT5SZWJ1aWxkQ29uZmlnKCVQYXJhbSk7CgogICAgJFNlbGYtPlByaW50KCI8Z3JlZW4+RG9uZS48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCg==</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Admin/MultipleCustomPackages/Register.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBUb3JzdGVuKGRvdClUaGF1KGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIFJlbmUoZG90KUJvZWhtKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6OkFkbWluOjpNdWx0aXBsZUN1c3RvbVBhY2thZ2VzOjpSZWdpc3RlcjsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6S0lYVXRpbHMnLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignUmVnaXN0ZXIgYSBjdXN0b20gcGFja2FnZScpOwoKICAgICRTZWxmLT5BZGRBcmd1bWVudCgKICAgICAgICBOYW1lICAgICAgICA9PiAncGFja2FnZS1uYW1lJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnbmFtZSBvZiBwYWNrYWdlIHRvIHJlZ2lzdGVyJywKICAgICAgICBSZXF1aXJlZCAgICA9PiAxLAogICAgICAgIFZhbHVlUmVnZXggID0+IHFyLyguKikvc214LAogICAgKTsKICAgICRTZWxmLT5BZGRBcmd1bWVudCgKICAgICAgICBOYW1lICAgICAgICA9PiAncHJpb3JpdHknLAogICAgICAgIERlc2NyaXB0aW9uID0+ICdwYWNrYWdlIHByaW9yaXR5JywKICAgICAgICBSZXF1aXJlZCAgICA9PiAxLAogICAgICAgIFZhbHVlUmVnZXggID0+IHFyL14oXGR7NH0pJC9zbXgsCiAgICApOwoKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRQYWNrYWdlTmFtZSA9ICRTZWxmLT5HZXRBcmd1bWVudCgncGFja2FnZS1uYW1lJyk7CiAgICBteSAkUHJpb3JpdHkgICAgPSAkU2VsZi0+R2V0QXJndW1lbnQoJ3ByaW9yaXR5Jyk7CgogICAgJFNlbGYtPlByaW50KCI8eWVsbG93Pk5PVEU6IHN0YXJ0IHRvIHJlZ2lzdGVyIHBhY2thZ2UgJyRQYWNrYWdlTmFtZSdcblxuPC95ZWxsb3c+XG4iKTsKCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6S0lYVXRpbHMnKS0+UmVnaXN0ZXJDdXN0b21QYWNrYWdlKAogICAgICAgIFBhY2thZ2VOYW1lID0+ICRQYWNrYWdlTmFtZSwKICAgICAgICBQcmlvcml0eSAgICA9PiAkUHJpb3JpdHkKICAgICk7CgogICAgJFNlbGYtPlByaW50KCI8Z3JlZW4+RG9uZS48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCg==</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Admin/MultipleCustomPackages/Unregister.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBUb3JzdGVuKGRvdClUaGF1KGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIFJlbmUoZG90KUJvZWhtKGF0KWNhcGUoZGFzaClpdChkb3QpZGUKIyAqIERvcm90aGVhKGRvdClEb2VyZmZlbChhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6OkFkbWluOjpNdWx0aXBsZUN1c3RvbVBhY2thZ2VzOjpVbnJlZ2lzdGVyOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdSZWdpc3RlciBhIGN1c3RvbSBwYWNrYWdlJyk7CgogICAgJFNlbGYtPkFkZEFyZ3VtZW50KAogICAgICAgIE5hbWUgICAgICAgID0+ICdwYWNrYWdlLW5hbWUnLAogICAgICAgIERlc2NyaXB0aW9uID0+ICduYW1lIG9mIHBhY2thZ2UgdG8gcmVnaXN0ZXInLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvKC4qKS9zbXgsCiAgICApOwoKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRQYWNrYWdlTmFtZSA9ICRTZWxmLT5HZXRBcmd1bWVudCgncGFja2FnZS1uYW1lJyk7CgogICAgJFNlbGYtPlByaW50KCI8eWVsbG93Pk5PVEU6IHN0YXJ0IHRvIHVucmVnaXN0ZXIgcGFja2FnZSAnJFBhY2thZ2VOYW1lJ1xuXG48L3llbGxvdz5cbiIpOwoKICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycpLT5VblJlZ2lzdGVyQ3VzdG9tUGFja2FnZSgKICAgICAgICBQYWNrYWdlTmFtZSA9PiAkUGFja2FnZU5hbWUKICAgICk7CgogICAgJFNlbGYtPlByaW50KCI8Z3JlZW4+RG9uZS48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCg==</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Maint/LoaderCache/Rebuild.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBEb3JvdGhlYShkb3QpRG9lcmZmZWwoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpNYWludDo6TG9hZGVyQ2FjaGU6OlJlYnVpbGQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgYmFzZSBxdyhLZXJuZWw6OlN5c3RlbTo6Q29uc29sZTo6QmFzZUNvbW1hbmQpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpDb25maWcnLAogICAgJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdSZWJ1aWxkcyB0aGUgbG9hZGVyIGNhY2hlLicpOwoKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5QcmludCgiPHllbGxvdz5SZWJ1aWxkaW5nIGxvYWRlciBjYWNoZS4uLjwveWVsbG93PlxuIik7CgogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+eydMb2FkZXI6OlByZUNyZWF0ZWRDYWNoZXMnfSA9IDA7CgogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpLT5Mb2FkZXJDcmVhdGVBZ2VudENTU0NhbGxzKCk7CiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JyktPkxvYWRlckNyZWF0ZUFnZW50SlNDYWxscygpOwogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpLT5Mb2FkZXJDcmVhdGVDdXN0b21lckNTU0NhbGxzKCk7CiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JyktPkxvYWRlckNyZWF0ZUN1c3RvbWVySlNDYWxscygpOwoKICAgICRTZWxmLT5QcmludCgiPGdyZWVuPkRvbmUuPC9ncmVlbj5cbiIpOwogICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7Cn0KCjE7Cgo=</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Maint/Memcached/Details.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBSZW5lKGRvdClCb2VobShhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgKiBEb3JvdGhlYShkb3QpRG9lcmZmZWwoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpNYWludDo6TWVtY2FjaGVkczo6RGV0YWlsczsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignRGV0YWlsZWQgaW5mb3MgYWJvdXQgb2JqZWN0cyBpbiBtZW1jYWNoZWQuJyk7CgogICAgJFNlbGYtPkFkZEFyZ3VtZW50KAogICAgICAgIE5hbWUgICAgICAgID0+ICd0eXBlJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnY2FjaGUgdHlwZScsCiAgICAgICAgUmVxdWlyZWQgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci8oLiopL3NteCwKICAgICk7CiAgICAkU2VsZi0+QWRkQXJndW1lbnQoCiAgICAgICAgTmFtZSAgICAgICAgPT4gJ2tleScsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ2NhY2hlIGtleScsCiAgICAgICAgUmVxdWlyZWQgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci8oLiopL3NteCwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFR5cGUgPSAkU2VsZi0+R2V0QXJndW1lbnQoJ3R5cGUnKTsKICAgIG15ICRLZXkgID0gJFNlbGYtPkdldEFyZ3VtZW50KCdrZXknKTsKCiAgICAjIGdldCBjb250ZW50IGZvciBjYWNoZSBrZXkKICAgIG15ICRSZXN1bHQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnKS0+R2V0KAogICAgICAgIEtleSAgPT4gJEtleSwKICAgICAgICBUeXBlID0+ICRUeXBlLAogICAgICAgIFJhdyAgPT4gMSwKICAgICk7CiAgICBpZiAoJFJlc3VsdCkgewogICAgICAgIHVzZSBEYXRhOjpEdW1wZXI7CiAgICAgICAgcHJpbnQgU1RERVJSIER1bXBlcigkUmVzdWx0KTsKICAgIH0KCiAgICAkU2VsZi0+UHJpbnQoIjxncmVlbj5Eb25lLjwvZ3JlZW4+XG4iKTsKICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVPaygpOwp9CgoxOwoK</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Maint/Memcached/List.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBSZW5lKGRvdClCb2VobShhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgKiBEb3JvdGhlYShkb3QpRG9lcmZmZWwoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpNYWludDo6TWVtY2FjaGVkOjpMaXN0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdJbmZvcyBhYm91dCBvYmplY3RzIGluIG1lbWNhY2hlZC4nKTsKCiAgICByZXR1cm47Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBhbGwgY2FjaGVkIG9iamVjdCB0eXBlcwogICAgbXkgJFJlc3VsdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScpLT5HZXQoCiAgICAgICAgS2V5ICA9PiAnQ2FjaGVkT2JqZWN0cycsCiAgICAgICAgVHlwZSA9PiAnTWVtY2FjaGVkJywKICAgICAgICBSYXcgID0+IDEsCiAgICApOwogICAgaWYgKCAkUmVzdWx0ICYmIHJlZigkUmVzdWx0KSBlcSAnSEFTSCcgKSB7CiAgICAgICAgZm9yZWFjaCBteSAkVHlwZSAoIHNvcnQga2V5cyAleyRSZXN1bHR9ICkgewogICAgICAgICAgICBwcmludCAkVHlwZS4gIlxuIjsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkU2VsZi0+UHJpbnQoIllvdSBjYW4ndCB1c2UgdGhlIFwiYWxsXCIgb3B0aW9uLCBiZWNhdXNlIHRoZXJlIGlzIG5vIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjYWNoZWQgb2JqZWN0cyBzdG9yZWQgaW4gdGhlIG1lbWNhY2hlLiBUaGlzIGlzIHRoZSBjYXNlIGlmIHlvdSd2ZSBkZWFrdGl2YXRlZCB0aGUgb3B0aW9uIFwiQ2FjaGU6Ok1vZHVsZTo6TWVtY2FjaGVkIyMjQ2FjaGVNZXRhSW5mb1wiIGluIHRoZSBTeXNDb25maWcuIik7CiAgICB9CgogICAgJFNlbGYtPlByaW50KCI8Z3JlZW4+RG9uZS48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCg==</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Maint/Memcached/Remove.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBSZW5lKGRvdClCb2VobShhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgKiBEb3JvdGhlYShkb3QpRG9lcmZmZWwoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpNYWludDo6TWVtY2FjaGVkczo6UmVtb3ZlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdSZW1vdmVzIG9iamVjdHMgaW4gbWVtY2FjaGVkLicpOwoKICAgICRTZWxmLT5BZGRBcmd1bWVudCgKICAgICAgICBOYW1lICAgICAgICA9PiAndHlwZScsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ2NhY2hlIHR5cGUnLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvKC4qKS9zbXgsCiAgICApOwogICAgJFNlbGYtPkFkZEFyZ3VtZW50KAogICAgICAgIE5hbWUgICAgICAgID0+ICdrZXknLAogICAgICAgIERlc2NyaXB0aW9uID0+ICdjYWNoZSBrZXknLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvKC4qKS9zbXgsCiAgICApOwoKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRUeXBlID0gJFNlbGYtPkdldEFyZ3VtZW50KCd0eXBlJyk7CiAgICBteSAkS2V5ICA9ICRTZWxmLT5HZXRBcmd1bWVudCgna2V5Jyk7CgogICAgJFNlbGYtPlByaW50KAogICAgICAgICI8eWVsbG93PnJlbW92aW5nLi4uPC95ZWxsb3c+XG4iCiAgICApOwoKICAgIG15ICRSZXN1bHQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnKS0+RGVsZXRlKAogICAgICAgIEtleSAgPT4gJEtleSwKICAgICAgICBUeXBlID0+ICRUeXBlLAogICAgICAgIFJhdyAgPT4gMSwKICAgICk7CgogICAgaWYgKCRSZXN1bHQpIHsKICAgICAgICBwcmludCAiXCIkVHlwZTo6JEtleVwiIHJlbW92ZWQuXG4iOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcHJpbnQgIlwiJFR5cGU6OiRLZXlcIiBub3QgZm91bmQhXG4iOwogICAgfQoKICAgICRTZWxmLT5QcmludCgiPGdyZWVuPkRvbmUuPC9ncmVlbj5cbiIpOwogICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7Cn0KCjE7Cgo=</File>
        <File Location="KIXCore/Kernel/System/Console/Command/Maint/Memcached/Type.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwNi0yMDE2IGMuYS5wLmUuIElUIEdtYkgsIGh0dHA6Ly93d3cuY2FwZS1pdC5kZQojCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBSZW5lKGRvdClCb2VobShhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgKiBEb3JvdGhlYShkb3QpRG9lcmZmZWwoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpNYWludDo6TWVtY2FjaGVkczo6VHlwZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignSW5mb3MgYWJvdXQgb2JqZWN0cyBpbiBtZW1jYWNoZWQuJyk7CgogICAgJFNlbGYtPkFkZEFyZ3VtZW50KAogICAgICAgIE5hbWUgICAgICAgID0+ICd0eXBlJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnY2FjaGUgdHlwZScsCiAgICAgICAgUmVxdWlyZWQgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci8oLiopL3NteCwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFR5cGUgPSAkU2VsZi0+R2V0QXJndW1lbnQoJ3R5cGUnKTsKCiAgICAjIGdldCBhbGwgY2FjaGVkIGtleXMgZm9yIHR5cGUKICAgIG15ICRSZXN1bHQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnKS0+R2V0KAogICAgICAgIEtleSAgPT4gJ0NhY2hlSW5kZXg6OicgLiAkVHlwZSwKICAgICAgICBUeXBlID0+ICdNZW1jYWNoZWQnLAogICAgICAgIFJhdyAgPT4gMSwKICAgICk7CiAgICBpZiAoICRSZXN1bHQgJiYgcmVmKCRSZXN1bHQpIGVxICdIQVNIJyApIHsKICAgICAgICBmb3JlYWNoIG15ICRLZXkgKCBzb3J0IGtleXMgJXskUmVzdWx0fSApIHsKICAgICAgICAgICAgcHJpbnQgJEtleS4gIlxuIjsKICAgICAgICB9CiAgICB9CgogICAgJFNlbGYtPlByaW50KCI8Z3JlZW4+RG9uZS48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCg==</File>
        <File Location="KIXCore/Kernel/System/LinkObject.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/System/Loader.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/System/Package.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/System/Stats.pm" Permission="644" Encode="Base64"></File>
        <File Location="KIXCore/Kernel/System/SysConfig.pm" Permission="644" Encode="Base64"></File>
        <File Location="var/packagesetup/KIXCore.pm" Permission="644" Encode="Base64">IyAtLQojIEtJWENvcmUucG0gLSBjb2RlIHJ1biBkdXJpbmcgcGFja2FnZSBkZS0vaW5zdGFsbGF0aW9uCiMgQ29weXJpZ2h0IChDKSAyMDA2LTIwMTYgYy5hLnAuZS4gSVQgR21iSCwgaHR0cDovL3d3dy5jYXBlLWl0LmRlCiMKIyB3cml0dGVuL2VkaXRlZCBieToKIyAqIFRvcnN0ZW4oZG90KVRoYXUoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojICogTWFydGluKGRvdClCYWx6YXJlayhhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgKiBEb3JvdGhlYShkb3QpRG9lcmZmZWwoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojCiMgLS0KIyAkSWQ6IEtJWENvcmUucG0sdiAxLjggMjAxNi8wMS8yMCAxMzo0NDo0NyBkZG9lcmZmZWwgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KcGFja2FnZSB2YXI6OnBhY2thZ2VzZXR1cDo6S0lYQ29yZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6Q29uZmlnJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TWFpbicsCiAgICAnS2VybmVsOjpTeXN0ZW06OlN5c0NvbmZpZycsCik7Cgp1c2UgdmFycyBxdyhASVNBICRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuOCAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS0lYQ29yZS5wbSAtIGNvZGUgdG8gZXhjZWN1dGUgZHVyaW5nIHBhY2thZ2UgaW5zdGFsbGF0aW9uCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCBmdW5jdGlvbnMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJENvZGVPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCd2YXI6OnBhY2thZ2VzZXR1cDo6S0lYQ29yZScpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGFsd2F5cyBkaXNjYXJkIHRoZSBjb25maWcgb2JqZWN0IGJlZm9yZSBwYWNrYWdlIGNvZGUgaXMgZXhlY3V0ZWQsCiAgICAjIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBjb25maWcgb2JqZWN0IHdpbGwgYmUgY3JlYXRlZCBuZXdseSwgc28gdGhhdCBpdAogICAgIyB3aWxsIHVzZSB0aGUgcmVjZW50bHkgd3JpdHRlbiBuZXcgY29uZmlnIGZyb20gdGhlIHBhY2thZ2UKICAgICRLZXJuZWw6Ok9NLT5PYmplY3RzRGlzY2FyZCgKICAgICAgICBPYmplY3RzID0+IFsnS2VybmVsOjpDb25maWcnXSwKICAgICk7CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzLi4uCiAgICAkU2VsZi0+e0NvbmZpZ09iamVjdH0gICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwogICAgJFNlbGYtPntNYWluT2JqZWN0fSAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Ok1haW4nKTsKICAgICRTZWxmLT57U3lzQ29uZmlnT2JqZWN0fSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTeXNDb25maWcnKTsKCiAgICAkU2VsZi0+e1N5c0NvbmZpZ09iamVjdH0tPldyaXRlRGVmYXVsdCgpOwogICAgbXkgQFpaWkZpbGVzID0gKAogICAgICAgICdaWlpBQXV0by5wbScsCiAgICAgICAgJ1paWkF1dG8ucG0nLAogICAgKTsKCiAgICAjIHJlbG9hZCB0aGUgWlpaIGZpbGVzIChtb2RfcGVybCB3b3JrYXJvdW5kKQogICAgZm9yIG15ICRaWlpGaWxlIChAWlpaRmlsZXMpIHsKICAgICAgICBQUkVGSVg6CiAgICAgICAgZm9yIG15ICRQcmVmaXggKEBJTkMpIHsKICAgICAgICAgICAgbXkgJEZpbGUgPSAkUHJlZml4IC4gJy9LZXJuZWwvQ29uZmlnL0ZpbGVzLycgLiAkWlpaRmlsZTsKICAgICAgICAgICAgaWYgKCAhLWYgJEZpbGUgKSB7CiAgICAgICAgICAgICAgICBuZXh0IFBSRUZJWAogICAgICAgICAgICB9CiAgICAgICAgICAgIGRvICRGaWxlOwogICAgICAgICAgICBsYXN0IFBSRUZJWDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIENvZGVJbnN0YWxsKCkKCnJ1biB0aGUgY29kZSBpbnN0YWxsIHBhcnQKCiAgICBteSAkUmVzdWx0ID0gJENvZGVPYmplY3QtPkNvZGVJbnN0YWxsKCk7Cgo9Y3V0CgpzdWIgQ29kZUluc3RhbGwgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAkU2VsZi0+X1ByZXBhcmVLSVhDb3JlKCk7CgogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIENvZGVSZWluc3RhbGwoKQoKcnVuIHRoZSBjb2RlIHJlaW5zdGFsbCBwYXJ0CgogICAgbXkgJFJlc3VsdCA9ICRDb2RlT2JqZWN0LT5Db2RlUmVpbnN0YWxsKCk7Cgo9Y3V0CgpzdWIgQ29kZVJlaW5zdGFsbCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5fUHJlcGFyZUtJWENvcmUoKTsKCiAgICByZXR1cm4gMTsKfQoKPWl0ZW0gQ29kZVVwZ3JhZGUoKQoKcnVuIHRoZSBjb2RlIHVwZ3JhZGUgcGFydAoKICAgIG15ICRSZXN1bHQgPSAkQ29kZU9iamVjdC0+Q29kZVVwZ3JhZGUoKTsKCj1jdXQKCnN1YiBDb2RlVXBncmFkZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiAxOwp9Cgo9aXRlbSBDb2RlVW5pbnN0YWxsKCkKCnJ1biB0aGUgY29kZSB1bmluc3RhbGwgcGFydAoKICAgIG15ICRSZXN1bHQgPSAkQ29kZU9iamVjdC0+Q29kZVVuaW5zdGFsbCgpOwoKPWN1dAoKc3ViIENvZGVVbmluc3RhbGwgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAkU2VsZi0+X1JlbW92ZUtJWENvcmUoKTsKCiAgICByZXR1cm4gMTsKCn0KCj1pdGVtIF9QcmVwYXJlS0lYQ29yZSgpCgpBdXRvbWF0aWNhbGx5IG9wZW4gZmlsZXMgd2hpY2ggbmVlZCB0byBiZSBlZGl0ZWQgZm9yIEtJWCB0c3VuYW1pIGZyYW1ld29yay4KCiAgICBteSAkUmVzdWx0ID0gJENvZGVPYmplY3QtPl9QcmVwYXJlS0lYQ29yZSgpOwoKPWN1dAoKc3ViIF9QcmVwYXJlS0lYQ29yZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgaW5pdGlhbGl6ZSBLSVhDb3JlOjpQYWNrYWdlcyBhcyByZXBvc2l0b3J5IGZvciByZWdpc3RlcmVkIHBhY2thZ2VzCgogICAgaWYgKCAkU2VsZi0+e01haW5PYmplY3R9LT5SZXF1aXJlKCdLZXJuZWw6OlN5c3RlbTo6S0lYVXRpbHMnKSApIHsKICAgICAgICAkU2VsZi0+e0tJWFV0aWxzT2JqZWN0fSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpLSVhVdGlscycpOwogICAgICAgICRTZWxmLT57S0lYVXRpbHNPYmplY3R9LT5SZWdpc3RlckN1c3RvbVBhY2thZ2UoCiAgICAgICAgICAgIFBhY2thZ2VOYW1lID0+ICdLSVhDb3JlJywKICAgICAgICAgICAgUHJpb3JpdHkgICAgPT4gJzAwMDAnLAogICAgICAgICk7CiAgICB9CgogICAgIyByZWxvYWQgY29uZmlndXJhdGlvbi4uLi4KICAgICRTZWxmLT57U3lzQ29uZmlnT2JqZWN0fS0+V3JpdGVEZWZhdWx0KCk7CiAgICBteSBAWlpaRmlsZXMgPSAoCiAgICAgICAgJ1paWkFBdXRvLnBtJywKICAgICAgICAnWlpaQXV0by5wbScsCiAgICApOwoKICAgICMgcmVsb2FkIHRoZSBaWlogZmlsZXMgKG1vZF9wZXJsIHdvcmthcm91bmQpCiAgICBmb3IgbXkgJFpaWkZpbGUgKEBaWlpGaWxlcykgewogICAgICAgIFBSRUZJWDoKICAgICAgICBmb3IgbXkgJFByZWZpeCAoQElOQykgewogICAgICAgICAgICBteSAkRmlsZSA9ICRQcmVmaXggLiAnL0tlcm5lbC9Db25maWcvRmlsZXMvJyAuICRaWlpGaWxlOwogICAgICAgICAgICBuZXh0IFBSRUZJWCBpZiAoICEtZiAkRmlsZSApOwogICAgICAgICAgICBkbyAkRmlsZTsKICAgICAgICAgICAgbGFzdCBQUkVGSVg7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIF9SZW1vdmVLSVhDb3JlKCkKClJlc3RvcmVzIGZpbGVzIHdoaWNoIHdlcmUgbW9kaWZpZWQgYnkgdGhlIGluc3RhbGxhdGlvbiBvZiBLSVhDb3JlLgoKICAgIG15ICRSZXN1bHQgPSAkQ29kZU9iamVjdC0+X1JlbW92ZUtJWENvcmUoKTsKCj1jdXQKCnN1YiBfUmVtb3ZlS0lYQ29yZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIGlmICggJFNlbGYtPntNYWluT2JqZWN0fS0+UmVxdWlyZSgnS2VybmVsOjpTeXN0ZW06OktJWFV0aWxzJykgKSB7CiAgICAgICAgJFNlbGYtPntLSVhVdGlsc09iamVjdH0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6S0lYVXRpbHMnKTsKICAgICAgICAkU2VsZi0+e0tJWFV0aWxzT2JqZWN0fS0+Q2xlYW5VcENvbmZpZ1BtKCk7CiAgICB9CgogICAgIyByZWxvYWQgY29uZmlndXJhdGlvbi4uLi4KICAgICRTZWxmLT57U3lzQ29uZmlnT2JqZWN0fS0+V3JpdGVEZWZhdWx0KCk7CiAgICBteSBAWlpaRmlsZXMgPSAoCiAgICAgICAgJ1paWkFBdXRvLnBtJywKICAgICAgICAnWlpaQXV0by5wbScsCiAgICApOwoKICAgICMgcmVsb2FkIHRoZSBaWlogZmlsZXMgKG1vZF9wZXJsIHdvcmthcm91bmQpCiAgICBmb3IgbXkgJFpaWkZpbGUgKEBaWlpGaWxlcykgewogICAgICAgIFBSRUZJWDoKICAgICAgICBmb3IgbXkgJFByZWZpeCAoQElOQykgewogICAgICAgICAgICBteSAkRmlsZSA9ICRQcmVmaXggLiAnL0tlcm5lbC9Db25maWcvRmlsZXMvJyAuICRaWlpGaWxlOwogICAgICAgICAgICBuZXh0IFBSRUZJWCBpZiAoICEtZiAkRmlsZSApOwogICAgICAgICAgICBkbyAkRmlsZTsKICAgICAgICAgICAgbGFzdCBQUkVGSVg7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDE7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIFNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KCj1jdXQKCj1oZWFkMSBWRVJTSU9OCiRSZXZpc2lvbjogMS44ICQgJERhdGU6IDIwMTYvMDEvMjAgMTM6NDQ6NDcgJAo9Y3V0Cg==</File>
    </Filelist>
    <DatabaseInstall>
    </DatabaseInstall>
    <DatabaseUpgrade>
    </DatabaseUpgrade>
    <DatabaseReinstall>
    </DatabaseReinstall>
    <DatabaseUninstall>
    </DatabaseUninstall>
</otrs_package>