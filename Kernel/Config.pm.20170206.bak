# --
# Copyright (C) 2001-2016 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --
#  Note:
#
#  -->> Most OTRS configuration should be done via the OTRS web interface
#       and the SysConfig. Only for some configuration, such as database
#       credentials and customer data source changes, you should edit this
#       file. For changes do customer data sources you can copy the definitions
#       from Kernel/Config/Defaults.pm and paste them in this file.
#       Config.pm will not be overwritten when updating OTRS.
# --

package Kernel::Config;

use strict;
use warnings;
#use utf8;

sub Load {
    my $Self = shift;

    # ---------------------------------------------------- #
    # database settings                                    #
    # ---------------------------------------------------- #

    # The database host
    $Self->{'DatabaseHost'} ='localhost';

    # The database name
    $Self->{'Database'} = "otrs1";

    # The database user
    $Self->{'DatabaseUser'} = "otrs";

    # The password of database user. You also can use bin/otrs.Console.pl Maint::Database::PasswordCrypt
    # for crypted passwords
    $Self->{'DatabasePw'} = '1qaz@3edc';

    # The database DSN for MySQL ==> more: "perldoc DBD::mysql"
    #$Self->{'DatabaseDSN'} = "DBI:Pg:dbname=$Self->{Database};host=$Self->{DatabaseHost}";

    # The database DSN for PostgreSQL ==> more: "perldoc DBD::Pg"
    # if you want to use a local socket connection
#    $Self->{DatabaseDSN} = "DBI:Pg:dbname=$Self->{Database};";
    # if you want to use a TCP/IP connection
    $Self->{DatabaseDSN} = "DBI:Pg:dbname=$Self->{Database};host=$Self->{DatabaseHost};";

    # The database DSN for Microsoft SQL Server - only supported if OTRS is
    # installed on Windows as well
#    $Self->{DatabaseDSN} = "DBI:ODBC:driver={SQL Server};Database=$Self->{Database};Server=$Self->{DatabaseHost},1433";

    # The database DSN for Oracle ==> more: "perldoc DBD::oracle"
#    $Self->{DatabaseDSN} = "DBI:Oracle://$Self->{DatabaseHost}:1521/$Self->{Database}";
#
#    $ENV{ORACLE_HOME}     = '/path/to/your/oracle';
#    $ENV{NLS_DATE_FORMAT} = 'YYYY-MM-DD HH24:MI:SS';
#    $ENV{NLS_LANG}        = 'AMERICAN_AMERICA.AL32UTF8';

    # ---------------------------------------------------- #
    # fs root directory
    # ---------------------------------------------------- #
    $Self->{Home} = '/opt/otrs';

    # ---------------------------------------------------- #
    # insert your own config settings "here"               #
    # config settings taken from Kernel/Config/Defaults.pm #
    # ---------------------------------------------------- #
    # $Self->{SessionUseCookie} = 0;
    # $Self->{CheckMXRecord} = 0;

    # ---------------------------------------------------- #

    # ---------------------------------------------------- #
    # data inserted by installer                           #
    # ---------------------------------------------------- #
    # $DIBI$

#$Self->{'DefaultCharset'} = 'zh_CN.GB1803';

 	$Self->{'DefaultCharset'} = 'utf-8';

# This is an example configuration for an LDAP auth. backend.
        # (take care that Net::LDAP is installed!)

        $Self->{AuthModule1} = 'Kernel::System::Auth::LDAP';
        $Self->{'AuthModule::LDAP::Host1'} = '10.1.30.12';
        $Self->{'AuthModule::LDAP::BaseDN1'} = 'dc=gdprh,dc=com';
        $Self->{'AuthModule::LDAP::UID1'} = 'sAMAccountName';

        # The following is valid but would only be necessary if the
        # anonymous user do NOT have permission to read from the LDAP tree

        $Self->{'AuthModule::LDAP::SearchUserDN1'} = 'CN=OTRS,OU=TEST,DC=gdprh,DC=com';
        $Self->{'AuthModule::LDAP::SearchUserPw1'} = '1qaz@3edc';

        # In case you need to use OTRS in iso-charset, you can define this
        # by using this option (converts utf-8 data from LDAP to iso).

        #$Self->{'AuthModule::LDAP::Charset'} = 'iso-8859-1';
        #$Self->{'AuthModule::LDAP::Charset'} = 'utf-8';
        # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
        $Self->{'AuthModule::LDAP::Params'} = {
            port    => 389,
            timeout => 120,
            async   => 0,
            version => 3,
        };

        # --------------------------------------------------- #
        # authentication sync settings                        #
        # (enable agent data sync. after succsessful          #
        # authentication)                                     #
        # --------------------------------------------------- #

        # This is an example configuration for an LDAP auth sync. backend.
        # (take care that Net::LDAP is installed!)

        $Self->{AuthSyncModule1} = 'Kernel::System::Auth::Sync::LDAP';
        $Self->{'AuthSyncModule::LDAP::Host1'} = '10.1.30.12';
        $Self->{'AuthSyncModule::LDAP::BaseDN1'} = 'dc=gdprh,dc=com';
        $Self->{'AuthSyncModule::LDAP::UID1'} = 'sAMAccountName';

        # The following is valid but would only be necessary if the
        # anonymous user do NOT have permission to read from the LDAP tree

        $Self->{'AuthSyncModule::LDAP::SearchUserDN1'} = 'CN=OTRS,OU=TEST,DC=gdprh,DC=com';
        $Self->{'AuthSyncModule::LDAP::SearchUserPw1'} = '1qaz@3edc';
        # AuthSyncModule::LDAP::UserSyncMap

        # (map if agent should create/synced from LDAP to DB after successful login)

        $Self->{'AuthSyncModule::LDAP::UserSyncMap1'} = {
            # DB -> LDAP
            UserFirstname => 'givenName',
            UserLastname  => 'sn',
            UserEmail     => 'mail',
        };

        # In case you need to use OTRS in iso-charset, you can define this
        # by using this option (converts utf-8 data from LDAP to iso).

    #    $Self->{'AuthSyncModule::LDAP::Charset'} = 'iso-8859-1';
        # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
    #    $Self->{'AuthSyncModule::LDAP::Params'} = {

    #        port    => 389,
    #        timeout => 120,
    #        async   => 0,
    #        version => 3,
    #    };

    #Enable LDAP authentication for Customers / Users

      $Self->{'Customer::AuthModule2'} = 'Kernel::System::CustomerAuth::LDAP';
      $Self->{'Customer::AuthModule::LDAP::Host2'} = '10.1.30.12';
      $Self->{'Customer::AuthModule::LDAP::BaseDN2'} = 'dc=gdprh,dc=com';
      $Self->{'Customer::AuthModule::LDAP::UID2'} = 'sAMAccountName';

    #The following is valid but would only be necessary if the
    #anonymous user do NOT have permission to read from the LDAP tree

      $Self->{'Customer::AuthModule::LDAP::SearchUserDN2'} = 'CN=OTRS,OU=TEST,DC=gdprh,DC=com';
      $Self->{'Customer::AuthModule::LDAP::SearchUserPw2'} = '1qaz@3edc';

    #CustomerUser
    #(customer user database backend and settings)

        $Self->{CustomerUser} = {
          Module => 'Kernel::System::CustomerUser::LDAP',
          Params => {
          Host => '10.1.30.12',
          BaseDN => 'dc=gdprh,dc=com',
          SSCOPE => 'sub',
          UserDN =>'CN=OTRS,OU=TEST,DC=gdprh,DC=com',
          UserPw => '1qaz@3edc',
        },

    # customer unique id

        CustomerKey => 'sAMAccountName',
        # customer #
        CustomerID => 'mail',
        CustomerUserListFields => ['sAMAccountName', 'cn', 'mail'],
        CustomerUserSearchFields => ['sAMAccountName', 'cn', 'mail'],
        CustomerUserSearchPrefix => '',
        CustomerUserSearchSuffix => '*',
        CustomerUserSearchListLimit => 250,
        CustomerUserPostMasterSearchFields => ['mail'],
        CustomerUserNameFields => ['givenname', 'sn'],

        Map => [
          # note: Login, Email and CustomerID needed!
          # var, frontend, storage, shown, required, storage-type
          #[ 'UserSalutation', 'Title', 'title', 1, 0, 'var' ],
          [ 'UserSalutation', 'Title', 'title', 1, 0, 'var' ],
          [ 'UserFirstname', 'Firstname', 'givenname', 1, 0, 'var' ],
          [ 'UserLastname', 'Lastname', 'sn', 1, 0, 'var' ],
          [ 'UserName', 'Username', 'displayName', 1, 0, 'var' ],
          [ 'UserLogin', 'Login', 'sAMAccountName', 1, 1, 'var' ],
          [ 'UserEmail', 'Email', 'mail', 1, 1, 'var' ],
          [ 'UserCustomerID', 'CustomerID', 'mail', 0, 1, 'var' ],
          [ 'UserPhone', 'Phone', 'mobile', 1, 0, 'var' ],
          #[ 'UserAddress', 'Address', 'postaladdress', 1, 0, 'var' ],
          #[ 'UserComment', 'Comment', 'description', 1, 0, 'var' ],
        ],
      };

    #Add the following lines when only users are allowed to login if they reside in the spicified security group
    #Remove these lines if you want to provide login to all users specified in the User Base DN
    #example: $Self->{'Customer::AuthModule::LDAP::BaseDN'} = 'ou=BaseOU, dc=example, dc=com';

      $Self->{'Customer::AuthModule::LDAP::GroupDN'} = 'CN=OTRS,OU=TEST,DC=gdprh,DC=com';
      $Self->{'Customer::AuthModule::LDAP::AccessAttr'} = 'memberUid';
      $Self->{'Customer::AuthModule::LDAP::UserAttr'} = 'UID'

        # Die if backend can't work, e. g. can't connect to server.
    #    $Self->{'AuthSyncModule::LDAP::Die'} = 1;
        # Die if backend can't work, e. g. can't connect to server.

    #    $Self->{'AuthModule::LDAP::Die'} = 1;

        # ---------------------------------------------------- #
        # ---------------------------------------------------- #
        #                                                      #
        # end of your own config options!!!                    #
        #                                                      #
        # ---------------------------------------------------- #
        # ---------------------------------------------------- #
    }
# ---------------------------------------------------- #
# needed system stuff (don't edit this)                #
# ---------------------------------------------------- #

#use Kernel::Config::Defaults; # import Translatable()
#use base qw(Kernel::Config::Defaults);

use strict;
use warnings;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.23 $)[1];

use Kernel::Config::Defaults;
push (@ISA, 'Kernel::Config::Defaults');


# -----------------------------------------------------#

1;
